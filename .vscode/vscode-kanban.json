{
  "todo": [
    {
      "assignedTo": {
        "name": "Gordon"
      },
      "creation_time": "2020-11-03T11:28:28.413Z",
      "description": {
        "content": "Camera class for handling canvas transforms",
        "mime": "text/markdown"
      },
      "details": {
        "content": "Handle scale (`config.scaleFactor`) properly\n\nMovement easing, also snap-to-position\n\nProbably don't need zoom? Could run some experiments, see how it looks with pixalated graphics...\n",
        "mime": "text/markdown"
      },
      "id": "2",
      "references": [],
      "title": "Camera"
    },
    {
      "assignedTo": {
        "name": "Gordon"
      },
      "creation_time": "2020-11-03T11:30:13.006Z",
      "description": {
        "content": "Entity Component System",
        "mime": "text/markdown"
      },
      "details": {
        "content": "Implementation of entity-component-system architecture\nSee `~/Projects/entity-component-system.js` for reference\n",
        "mime": "text/markdown"
      },
      "id": "3",
      "references": [],
      "title": "ECS"
    },
    {
      "assignedTo": {
        "name": "Gordon"
      },
      "creation_time": "2020-11-03T11:24:56.426Z",
      "description": {
        "content": "Globally accessible content storage and loader",
        "mime": "text/markdown"
      },
      "details": {
        "content": "Load in parallel or series?\n\n* Reads content manifest (content.json) and starts loading assets\n* Loads multiple types of assets with custom loader functions\n* Assets addressable by name, globally accessible\n* Output loading progress\n",
        "mime": "text/markdown"
      },
      "id": "1",
      "references": [],
      "title": "ContentManager"
    }
  ],
  "in-progress": [
    {
      "assignedTo": {
        "name": "Gordon"
      },
      "creation_time": "2020-11-03T11:31:48.595Z",
      "description": {
        "content": "For main menu, options menu, pause menu etc.",
        "mime": "text/markdown"
      },
      "details": {
        "content": "Menu/MenuItem classes\n\n* Touch & keyboard controls\n* Buttons, maybe other controls (sliders, toggles, etc.)\n* Use state transitions\n",
        "mime": "text/markdown"
      },
      "id": "4",
      "references": [],
      "title": "Menu system"
    }
  ],
  "testing": [],
  "done": [
    {
      "assignedTo": {
        "name": "Gordon"
      },
      "creation_time": "2020-11-03T11:50:35.671Z",
      "description": {
        "content": "Handles mouse left click / touch and keyboard events",
        "mime": "text/markdown"
      },
      "id": "5",
      "references": [],
      "title": "InputManager"
    },
    {
      "assignedTo": {
        "name": "Gordon"
      },
      "creation_time": "2020-11-03T11:52:02.951Z",
      "description": {
        "content": "Handles states and state transitions",
        "mime": "text/markdown"
      },
      "details": {
        "content": "* State stack\n* Transparent states (render the state below them)\n* State transitions\n* `push()`, `pop()` and `clear()` methods\n",
        "mime": "text/markdown"
      },
      "id": "6",
      "references": [],
      "title": "StateManager"
    }
  ]
}