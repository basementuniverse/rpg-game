/*! For license information please see game.js.LICENSE.txt */
(()=>{var e={9578:e=>{"use strict";e.exports=JSON.parse('{"items":[{"name":"error","type":"image","args":["content/images/error.png"]},{"name":"logo","type":"image","args":["content/images/logo.png"]},{"name":"menu_background","type":"image","args":["content/images/parchment.png"]},{"name":"menu_title","type":"image","args":["content/images/parchment_banner.png"]},{"name":"menu_button","type":"image","args":["content/images/parchment_button.png"]},{"name":"menu_button_selected","type":"image","args":["content/images/parchment_button_white.png"]},{"name":"menu_font","type":"font","args":["content/fonts/aniron.ttf","aniron"]},{"name":"testdata1","type":"json","args":["content/json/testdata1.json"]},{"name":"testdata2","type":"json","args":["content/json/testdata2.json"]},{"name":"testdata3","type":"json","args":["content/json/testdata3.json"]},{"name":"testsound","type":"sound","args":["content/sounds/blip1.wav"]}]}')},3044:e=>{Math.floatEquals=(e,t,r=Number.EPSILON)=>Math.abs(e-t)<r,Math.clamp=(e,t=0,r=1)=>e<t?t:e>r?r:e,Math.frac=e=>e>=0?e-Math.floor(e):e-Math.ceil(e),Math.lerp=(e,t,r)=>e+(t-e)*r,Math.unlerp=(e,t,r)=>(r-e)/(t-e),Math.blerp=(e,t,r,s,a,o)=>Math.lerp(Math.lerp(e,t,a),Math.lerp(r,s,a),o),Math.remap=(e,t,r,s,a)=>s+(e-t)*(a-s)/(r-t),Math.smoothstep=(e,t,r)=>Math.lerp(e,t,3*Math.pow(r,2)-2*Math.pow(r,3)),Math.radians=e=>Math.PI/180*e,Math.degrees=e=>180/Math.PI*e,Math.randomBetween=(e,t)=>Math.random()*(t-e)+e,Math.randomIntBetween=(e,t)=>Math.floor(Math.random()*(t-e+1))+e,Math.cltRandom=(e=.5,t=.5,r=2)=>{let s=0;for(let e=r;e--;)s+=Math.random();return e+(s-r/2)/(r/2)*t},Math.cltRandomInt=(e,t)=>Math.floor(e+Math.cltRandom(.5,.5,2)*(t+1-e)),Math.weightedRandom=e=>{let t=e.reduce(((e,t)=>e+t),0),r=0;const s=Math.random()*t;for(;t>s;)t-=e[r++];return r-1},Math.lerpArray=(e,t,r=Math.lerp)=>{const s=t*(e.length-1),a=Math.clamp(Math.trunc(s),0,e.length-1);return r(e[a]||0,e[a+1]||0,Math.frac(s))},Math.dot=(e,t)=>e.reduce(((e,r,s)=>e+r*t[s]),0),Math.factorial=e=>{let t=1;for(let r=2;r<=e;r++)t*=r;return t},Math.permutation=(e,t)=>Math.factorial(e)/Math.factorial(e-t),Math.combination=(e,t)=>Math.factorial(e)/(Math.factorial(t)*Math.factorial(e-t)),Array.times=(e,t)=>Array(t).fill(0).map(((t,r)=>e(r))),Array.range=e=>Array.times((e=>e),e),Object.defineProperty(Array.prototype,"at",{value:function(e){const t=this.length;return this[e<0?t-Math.abs(e+1)%t-1:e%t]}}),Object.defineProperty(Array.prototype,"chunk",{value:function(e){return Array.times((t=>this.slice(t*e,t*e+e)),Math.ceil(this.length/e))}}),Object.defineProperty(Array.prototype,"shuffle",{value:function(){return this.map((e=>[Math.random(),e])).sort(((e,t)=>e[0]-t[0])).map((e=>e[1]))}});const t=(e,t)=>e||t?"object"==typeof e?{x:e.x||0,y:e.y||0}:null==t?{x:e,y:e}:{x:e,y:t}:{x:0,y:0};t.components=e=>[e.x,e.y],t.ux=()=>t(1,0),t.uy=()=>t(0,1),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.mul=(e,t)=>({x:e.x*t,y:e.y*t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.len=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.manhattan=e=>Math.abs(e.x)+Math.abs(e.y),t.nor=e=>{let r=t.len(e);return r?{x:e.x/r,y:e.y/r}:t()},t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.rot=(e,t)=>{let r=Math.sin(t),s=Math.cos(t);return{x:s*e.x-r*e.y,y:r*e.x+s*e.y}},t.eq=(e,t)=>e.x===t.x&&e.y===t.y,t.rad=e=>Math.atan2(e.y,e.x),t.cpy=e=>t(e),t.map=(e,t)=>({x:t(e.x,"x"),y:t(e.y,"y")}),t.str=(e,t=", ")=>`${e.x}${t}${e.y}`;const r=(e=4,t=4,r=[])=>({m:e,n:t,entries:r.concat(Array(e*t).fill(0)).slice(0,e*t)});r.identity=e=>r(e,e,Array(e*e).fill(0).map(((t,r)=>+(Math.floor(r/e)===r%e)))),r.get=(e,t,r)=>e.entries[r-1+(t-1)*e.n],r.set=(e,t,r,s)=>{e.entries[r-1+(t-1)*e.n]=s},r.row=(e,t)=>{const r=(t-1)*e.n;return e.entries.slice(r,r+e.n)},r.col=(e,t)=>Array.times((s=>r.get(e,s+1,t)),e.m),r.add=(e,t)=>e.m===t.m&&e.n===t.n&&r.map(e,((e,r)=>e+t.entries[r])),r.sub=(e,t)=>e.m===t.m&&e.n===t.n&&r.map(e,((e,r)=>e-t.entries[r])),r.mul=(e,t)=>{if(e.n!==t.m)return!1;const s=r(e.m,t.n);for(let a=1;a<=e.m;a++)for(let o=1;o<=t.n;o++)r.set(s,a,o,Math.dot(r.row(e,a),r.col(t,o)));return s},r.scale=(e,t)=>r.map(e,(e=>e*t)),r.trans=e=>r(e.n,e.m,Array.times((t=>r.col(e,t+1)),e.n).flat()),r.minor=(e,t,s)=>{if(e.m!==e.n)return!1;const a=[];for(let o=1;o<=e.m;o++)if(o!==t)for(let t=1;t<=e.n;t++)t!==s&&a.push(r.get(e,o,t));return r(e.m-1,e.n-1,a)},r.det=e=>{if(e.m!==e.n)return!1;if(1===e.m)return e.entries[0];if(2===e.m)return e.entries[0]*e.entries[3]-e.entries[1]*e.entries[2];let t=0,s=1;for(let a=1;a<=e.n;a++)t+=s*e.entries[a-1]*r.det(r.minor(e,1,a)),s*=-1;return t},r.nor=e=>{if(e.m!==e.n)return!1;const t=r.det(e);return r.map(e,(e=>e*t))},r.adj=e=>{const t=r(e.m,e.n);for(let s=1;s<=e.m;s++)for(let a=1;a<=e.n;a++)r.set(t,s,a,r.det(r.minor(e,s,a)));const s=r.map(t,((e,t)=>e*(t%2?-1:1)));return r.trans(s)},r.inv=e=>{if(e.m!==e.n)return!1;const t=r.det(e);return 0!==t&&r.scale(r.adj(e),1/t)},r.eq=(e,t)=>e.m===t.m&&e.n===t.n&&r.str(e)===r.str(t),r.cpy=e=>r(e.m,e.n,[...e.entries]),r.map=(e,t)=>r(e.m,e.n,e.entries.map(t)),r.str=(e,t=", ",r="\n")=>e.entries.chunk(e.n).map((e=>e.join(t))).join(r),e.exports={vec:t,mat:r}},1581:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CodeGen=t.Name=t.nil=t.stringify=t.str=t._=t.KeywordCxt=void 0;const s=r(7159),a=r(3924),o=r(1240),n=r(278),i=["/properties"],c="http://json-schema.org/draft-07/schema";class d extends s.default{_addVocabularies(){super._addVocabularies(),a.default.forEach((e=>this.addVocabulary(e))),this.opts.discriminator&&this.addKeyword(o.default)}_addDefaultMetaSchema(){if(super._addDefaultMetaSchema(),!this.opts.meta)return;const e=this.opts.$data?this.$dataMetaSchema(n,i):n;this.addMetaSchema(e,c,!1),this.refs["http://json-schema.org/schema"]=c}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(c)?c:void 0)}}e.exports=t=d,Object.defineProperty(t,"__esModule",{value:!0}),t.default=d;var l=r(4815);Object.defineProperty(t,"KeywordCxt",{enumerable:!0,get:function(){return l.KeywordCxt}});var u=r(3487);Object.defineProperty(t,"_",{enumerable:!0,get:function(){return u._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return u.str}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return u.stringify}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return u.nil}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return u.Name}}),Object.defineProperty(t,"CodeGen",{enumerable:!0,get:function(){return u.CodeGen}})},7023:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.regexpCode=t.getProperty=t.safeStringify=t.stringify=t.strConcat=t.addCodeArg=t.str=t._=t.nil=t._Code=t.Name=t.IDENTIFIER=t._CodeOrName=void 0;class r{}t._CodeOrName=r,t.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class s extends r{constructor(e){if(super(),!t.IDENTIFIER.test(e))throw new Error("CodeGen: name must be a valid identifier");this.str=e}toString(){return this.str}emptyStr(){return!1}get names(){return{[this.str]:1}}}t.Name=s;class a extends r{constructor(e){super(),this._items="string"==typeof e?[e]:e}toString(){return this.str}emptyStr(){if(this._items.length>1)return!1;const e=this._items[0];return""===e||'""'===e}get str(){var e;return null!==(e=this._str)&&void 0!==e?e:this._str=this._items.reduce(((e,t)=>`${e}${t}`),"")}get names(){var e;return null!==(e=this._names)&&void 0!==e?e:this._names=this._items.reduce(((e,t)=>(t instanceof s&&(e[t.str]=(e[t.str]||0)+1),e)),{})}}function o(e,...t){const r=[e[0]];let s=0;for(;s<t.length;)c(r,t[s]),r.push(e[++s]);return new a(r)}t._Code=a,t.nil=new a(""),t._=o;const n=new a("+");function i(e,...t){const r=[l(e[0])];let s=0;for(;s<t.length;)r.push(n),c(r,t[s]),r.push(n,l(e[++s]));return function(e){let t=1;for(;t<e.length-1;){if(e[t]===n){const r=d(e[t-1],e[t+1]);if(void 0!==r){e.splice(t-1,3,r);continue}e[t++]="+"}t++}}(r),new a(r)}function c(e,t){var r;t instanceof a?e.push(...t._items):t instanceof s?e.push(t):e.push("number"==typeof(r=t)||"boolean"==typeof r||null===r?r:l(Array.isArray(r)?r.join(","):r))}function d(e,t){if('""'===t)return e;if('""'===e)return t;if("string"==typeof e){if(t instanceof s||'"'!==e[e.length-1])return;return"string"!=typeof t?`${e.slice(0,-1)}${t}"`:'"'===t[0]?e.slice(0,-1)+t.slice(1):void 0}return"string"!=typeof t||'"'!==t[0]||e instanceof s?void 0:`"${e}${t.slice(1)}`}function l(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}t.str=i,t.addCodeArg=c,t.strConcat=function(e,t){return t.emptyStr()?e:e.emptyStr()?t:i`${e}${t}`},t.stringify=function(e){return new a(l(e))},t.safeStringify=l,t.getProperty=function(e){return"string"==typeof e&&t.IDENTIFIER.test(e)?new a("."+e):o`[${e}]`},t.regexpCode=function(e){return new a(e.toString())}},3487:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.or=t.and=t.not=t.CodeGen=t.operators=t.varKinds=t.ValueScopeName=t.ValueScope=t.Scope=t.Name=t.regexpCode=t.stringify=t.getProperty=t.nil=t.strConcat=t.str=t._=void 0;const s=r(7023),a=r(8490);var o=r(7023);Object.defineProperty(t,"_",{enumerable:!0,get:function(){return o._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return o.str}}),Object.defineProperty(t,"strConcat",{enumerable:!0,get:function(){return o.strConcat}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return o.nil}}),Object.defineProperty(t,"getProperty",{enumerable:!0,get:function(){return o.getProperty}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return o.stringify}}),Object.defineProperty(t,"regexpCode",{enumerable:!0,get:function(){return o.regexpCode}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return o.Name}});var n=r(8490);Object.defineProperty(t,"Scope",{enumerable:!0,get:function(){return n.Scope}}),Object.defineProperty(t,"ValueScope",{enumerable:!0,get:function(){return n.ValueScope}}),Object.defineProperty(t,"ValueScopeName",{enumerable:!0,get:function(){return n.ValueScopeName}}),Object.defineProperty(t,"varKinds",{enumerable:!0,get:function(){return n.varKinds}}),t.operators={GT:new s._Code(">"),GTE:new s._Code(">="),LT:new s._Code("<"),LTE:new s._Code("<="),EQ:new s._Code("==="),NEQ:new s._Code("!=="),NOT:new s._Code("!"),OR:new s._Code("||"),AND:new s._Code("&&"),ADD:new s._Code("+")};class i{optimizeNodes(){return this}optimizeNames(e,t){return this}}class c extends i{constructor(e,t,r){super(),this.varKind=e,this.name=t,this.rhs=r}render({es5:e,_n:t}){const r=e?a.varKinds.var:this.varKind,s=void 0===this.rhs?"":" = "+this.rhs;return`${r} ${this.name}${s};`+t}optimizeNames(e,t){if(e[this.name.str])return this.rhs&&(this.rhs=N(this.rhs,e,t)),this}get names(){return this.rhs instanceof s._CodeOrName?this.rhs.names:{}}}class d extends i{constructor(e,t,r){super(),this.lhs=e,this.rhs=t,this.sideEffects=r}render({_n:e}){return`${this.lhs} = ${this.rhs};`+e}optimizeNames(e,t){if(!(this.lhs instanceof s.Name)||e[this.lhs.str]||this.sideEffects)return this.rhs=N(this.rhs,e,t),this}get names(){return C(this.lhs instanceof s.Name?{}:{...this.lhs.names},this.rhs)}}class l extends d{constructor(e,t,r,s){super(e,r,s),this.op=t}render({_n:e}){return`${this.lhs} ${this.op}= ${this.rhs};`+e}}class u extends i{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return this.label+":"+e}}class h extends i{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`break${this.label?" "+this.label:""};`+e}}class p extends i{constructor(e){super(),this.error=e}render({_n:e}){return`throw ${this.error};`+e}get names(){return this.error.names}}class f extends i{constructor(e){super(),this.code=e}render({_n:e}){return this.code+";"+e}optimizeNodes(){return""+this.code?this:void 0}optimizeNames(e,t){return this.code=N(this.code,e,t),this}get names(){return this.code instanceof s._CodeOrName?this.code.names:{}}}class m extends i{constructor(e=[]){super(),this.nodes=e}render(e){return this.nodes.reduce(((t,r)=>t+r.render(e)),"")}optimizeNodes(){const{nodes:e}=this;let t=e.length;for(;t--;){const r=e[t].optimizeNodes();Array.isArray(r)?e.splice(t,1,...r):r?e[t]=r:e.splice(t,1)}return e.length>0?this:void 0}optimizeNames(e,t){const{nodes:r}=this;let s=r.length;for(;s--;){const a=r[s];a.optimizeNames(e,t)||(j(e,a.names),r.splice(s,1))}return r.length>0?this:void 0}get names(){return this.nodes.reduce(((e,t)=>x(e,t.names)),{})}}class y extends m{render(e){return"{"+e._n+super.render(e)+"}"+e._n}}class g extends m{}class v extends y{}v.kind="else";class w extends y{constructor(e,t){super(t),this.condition=e}render(e){let t=`if(${this.condition})`+super.render(e);return this.else&&(t+="else "+this.else.render(e)),t}optimizeNodes(){super.optimizeNodes();const e=this.condition;if(!0===e)return this.nodes;let t=this.else;if(t){const e=t.optimizeNodes();t=this.else=Array.isArray(e)?new v(e):e}return t?!1===e?t instanceof w?t:t.nodes:this.nodes.length?this:new w(I(e),t instanceof w?[t]:t.nodes):!1!==e&&this.nodes.length?this:void 0}optimizeNames(e,t){var r;if(this.else=null===(r=this.else)||void 0===r?void 0:r.optimizeNames(e,t),super.optimizeNames(e,t)||this.else)return this.condition=N(this.condition,e,t),this}get names(){const e=super.names;return C(e,this.condition),this.else&&x(e,this.else.names),e}}w.kind="if";class $ extends y{}$.kind="for";class _ extends ${constructor(e){super(),this.iteration=e}render(e){return`for(${this.iteration})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iteration=N(this.iteration,e,t),this}get names(){return x(super.names,this.iteration.names)}}class b extends ${constructor(e,t,r,s){super(),this.varKind=e,this.name=t,this.from=r,this.to=s}render(e){const t=e.es5?a.varKinds.var:this.varKind,{name:r,from:s,to:o}=this;return`for(${t} ${r}=${s}; ${r}<${o}; ${r}++)`+super.render(e)}get names(){const e=C(super.names,this.from);return C(e,this.to)}}class S extends ${constructor(e,t,r,s){super(),this.loop=e,this.varKind=t,this.name=r,this.iterable=s}render(e){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iterable=N(this.iterable,e,t),this}get names(){return x(super.names,this.iterable.names)}}class E extends y{constructor(e,t,r){super(),this.name=e,this.args=t,this.async=r}render(e){return`${this.async?"async ":""}function ${this.name}(${this.args})`+super.render(e)}}E.kind="func";class P extends m{render(e){return"return "+super.render(e)}}P.kind="return";class T extends y{render(e){let t="try"+super.render(e);return this.catch&&(t+=this.catch.render(e)),this.finally&&(t+=this.finally.render(e)),t}optimizeNodes(){var e,t;return super.optimizeNodes(),null===(e=this.catch)||void 0===e||e.optimizeNodes(),null===(t=this.finally)||void 0===t||t.optimizeNodes(),this}optimizeNames(e,t){var r,s;return super.optimizeNames(e,t),null===(r=this.catch)||void 0===r||r.optimizeNames(e,t),null===(s=this.finally)||void 0===s||s.optimizeNames(e,t),this}get names(){const e=super.names;return this.catch&&x(e,this.catch.names),this.finally&&x(e,this.finally.names),e}}class k extends y{constructor(e){super(),this.error=e}render(e){return`catch(${this.error})`+super.render(e)}}k.kind="catch";class O extends y{render(e){return"finally"+super.render(e)}}function x(e,t){for(const r in t)e[r]=(e[r]||0)+(t[r]||0);return e}function C(e,t){return t instanceof s._CodeOrName?x(e,t.names):e}function N(e,t,r){return e instanceof s.Name?o(e):(a=e)instanceof s._Code&&a._items.some((e=>e instanceof s.Name&&1===t[e.str]&&void 0!==r[e.str]))?new s._Code(e._items.reduce(((e,t)=>(t instanceof s.Name&&(t=o(t)),t instanceof s._Code?e.push(...t._items):e.push(t),e)),[])):e;var a;function o(e){const s=r[e.str];return void 0===s||1!==t[e.str]?e:(delete t[e.str],s)}}function j(e,t){for(const r in t)e[r]=(e[r]||0)-(t[r]||0)}function I(e){return"boolean"==typeof e||"number"==typeof e||null===e?!e:s._`!${D(e)}`}O.kind="finally",t.CodeGen=class{constructor(e,t={}){this._values={},this._blockStarts=[],this._constants={},this.opts={...t,_n:t.lines?"\n":""},this._extScope=e,this._scope=new a.Scope({parent:e}),this._nodes=[new g]}toString(){return this._root.render(this.opts)}name(e){return this._scope.name(e)}scopeName(e){return this._extScope.name(e)}scopeValue(e,t){const r=this._extScope.value(e,t);return(this._values[r.prefix]||(this._values[r.prefix]=new Set)).add(r),r}getScopeValue(e,t){return this._extScope.getValue(e,t)}scopeRefs(e){return this._extScope.scopeRefs(e,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(e,t,r,s){const a=this._scope.toName(t);return void 0!==r&&s&&(this._constants[a.str]=r),this._leafNode(new c(e,a,r)),a}const(e,t,r){return this._def(a.varKinds.const,e,t,r)}let(e,t,r){return this._def(a.varKinds.let,e,t,r)}var(e,t,r){return this._def(a.varKinds.var,e,t,r)}assign(e,t,r){return this._leafNode(new d(e,t,r))}add(e,r){return this._leafNode(new l(e,t.operators.ADD,r))}code(e){return"function"==typeof e?e():e!==s.nil&&this._leafNode(new f(e)),this}object(...e){const t=["{"];for(const[r,a]of e)t.length>1&&t.push(","),t.push(r),(r!==a||this.opts.es5)&&(t.push(":"),s.addCodeArg(t,a));return t.push("}"),new s._Code(t)}if(e,t,r){if(this._blockNode(new w(e)),t&&r)this.code(t).else().code(r).endIf();else if(t)this.code(t).endIf();else if(r)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(e){return this._elseNode(new w(e))}else(){return this._elseNode(new v)}endIf(){return this._endBlockNode(w,v)}_for(e,t){return this._blockNode(e),t&&this.code(t).endFor(),this}for(e,t){return this._for(new _(e),t)}forRange(e,t,r,s,o=(this.opts.es5?a.varKinds.var:a.varKinds.let)){const n=this._scope.toName(e);return this._for(new b(o,n,t,r),(()=>s(n)))}forOf(e,t,r,o=a.varKinds.const){const n=this._scope.toName(e);if(this.opts.es5){const e=t instanceof s.Name?t:this.var("_arr",t);return this.forRange("_i",0,s._`${e}.length`,(t=>{this.var(n,s._`${e}[${t}]`),r(n)}))}return this._for(new S("of",o,n,t),(()=>r(n)))}forIn(e,t,r,o=(this.opts.es5?a.varKinds.var:a.varKinds.const)){if(this.opts.ownProperties)return this.forOf(e,s._`Object.keys(${t})`,r);const n=this._scope.toName(e);return this._for(new S("in",o,n,t),(()=>r(n)))}endFor(){return this._endBlockNode($)}label(e){return this._leafNode(new u(e))}break(e){return this._leafNode(new h(e))}return(e){const t=new P;if(this._blockNode(t),this.code(e),1!==t.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(P)}try(e,t,r){if(!t&&!r)throw new Error('CodeGen: "try" without "catch" and "finally"');const s=new T;if(this._blockNode(s),this.code(e),t){const e=this.name("e");this._currNode=s.catch=new k(e),t(e)}return r&&(this._currNode=s.finally=new O,this.code(r)),this._endBlockNode(k,O)}throw(e){return this._leafNode(new p(e))}block(e,t){return this._blockStarts.push(this._nodes.length),e&&this.code(e).endBlock(t),this}endBlock(e){const t=this._blockStarts.pop();if(void 0===t)throw new Error("CodeGen: not in self-balancing block");const r=this._nodes.length-t;if(r<0||void 0!==e&&r!==e)throw new Error(`CodeGen: wrong number of nodes: ${r} vs ${e} expected`);return this._nodes.length=t,this}func(e,t=s.nil,r,a){return this._blockNode(new E(e,t,r)),a&&this.code(a).endFunc(),this}endFunc(){return this._endBlockNode(E)}optimize(e=1){for(;e-- >0;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(e){return this._currNode.nodes.push(e),this}_blockNode(e){this._currNode.nodes.push(e),this._nodes.push(e)}_endBlockNode(e,t){const r=this._currNode;if(r instanceof e||t&&r instanceof t)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${t?`${e.kind}/${t.kind}`:e.kind}"`)}_elseNode(e){const t=this._currNode;if(!(t instanceof w))throw new Error('CodeGen: "else" without "if"');return this._currNode=t.else=e,this}get _root(){return this._nodes[0]}get _currNode(){const e=this._nodes;return e[e.length-1]}set _currNode(e){const t=this._nodes;t[t.length-1]=e}},t.not=I;const M=A(t.operators.AND);t.and=function(...e){return e.reduce(M)};const R=A(t.operators.OR);function A(e){return(t,r)=>t===s.nil?r:r===s.nil?t:s._`${D(t)} ${e} ${D(r)}`}function D(e){return e instanceof s.Name?e:s._`(${e})`}t.or=function(...e){return e.reduce(R)}},8490:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValueScope=t.ValueScopeName=t.Scope=t.varKinds=t.UsedValueState=void 0;const s=r(7023);class a extends Error{constructor(e){super(`CodeGen: "code" for ${e} not defined`),this.value=e.value}}var o;!function(e){e[e.Started=0]="Started",e[e.Completed=1]="Completed"}(o=t.UsedValueState||(t.UsedValueState={})),t.varKinds={const:new s.Name("const"),let:new s.Name("let"),var:new s.Name("var")};class n{constructor({prefixes:e,parent:t}={}){this._names={},this._prefixes=e,this._parent=t}toName(e){return e instanceof s.Name?e:this.name(e)}name(e){return new s.Name(this._newName(e))}_newName(e){return`${e}${(this._names[e]||this._nameGroup(e)).index++}`}_nameGroup(e){var t,r;if((null===(r=null===(t=this._parent)||void 0===t?void 0:t._prefixes)||void 0===r?void 0:r.has(e))||this._prefixes&&!this._prefixes.has(e))throw new Error(`CodeGen: prefix "${e}" is not allowed in this scope`);return this._names[e]={prefix:e,index:0}}}t.Scope=n;class i extends s.Name{constructor(e,t){super(t),this.prefix=e}setValue(e,{property:t,itemIndex:r}){this.value=e,this.scopePath=s._`.${new s.Name(t)}[${r}]`}}t.ValueScopeName=i;const c=s._`\n`;t.ValueScope=class extends n{constructor(e){super(e),this._values={},this._scope=e.scope,this.opts={...e,_n:e.lines?c:s.nil}}get(){return this._scope}name(e){return new i(e,this._newName(e))}value(e,t){var r;if(void 0===t.ref)throw new Error("CodeGen: ref must be passed in value");const s=this.toName(e),{prefix:a}=s,o=null!==(r=t.key)&&void 0!==r?r:t.ref;let n=this._values[a];if(n){const e=n.get(o);if(e)return e}else n=this._values[a]=new Map;n.set(o,s);const i=this._scope[a]||(this._scope[a]=[]),c=i.length;return i[c]=t.ref,s.setValue(t,{property:a,itemIndex:c}),s}getValue(e,t){const r=this._values[e];if(r)return r.get(t)}scopeRefs(e,t=this._values){return this._reduceValues(t,(t=>{if(void 0===t.scopePath)throw new Error(`CodeGen: name "${t}" has no value`);return s._`${e}${t.scopePath}`}))}scopeCode(e=this._values,t,r){return this._reduceValues(e,(e=>{if(void 0===e.value)throw new Error(`CodeGen: name "${e}" has no value`);return e.value.code}),t,r)}_reduceValues(e,r,n={},i){let c=s.nil;for(const d in e){const l=e[d];if(!l)continue;const u=n[d]=n[d]||new Map;l.forEach((e=>{if(u.has(e))return;u.set(e,o.Started);let n=r(e);if(n){const r=this.opts.es5?t.varKinds.var:t.varKinds.const;c=s._`${c}${r} ${e} = ${n};${this.opts._n}`}else{if(!(n=null==i?void 0:i(e)))throw new a(e);c=s._`${c}${n}${this.opts._n}`}u.set(e,o.Completed)}))}return c}}},4181:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extendErrors=t.resetErrorsCount=t.reportExtraError=t.reportError=t.keyword$DataError=t.keywordError=void 0;const s=r(3487),a=r(6776),o=r(2141);function n(e,t){const r=e.const("err",t);e.if(s._`${o.default.vErrors} === null`,(()=>e.assign(o.default.vErrors,s._`[${r}]`)),s._`${o.default.vErrors}.push(${r})`),e.code(s._`${o.default.errors}++`)}function i(e,t){const{gen:r,validateName:a,schemaEnv:o}=e;o.$async?r.throw(s._`new ${e.ValidationError}(${t})`):(r.assign(s._`${a}.errors`,t),r.return(!1))}t.keywordError={message:({keyword:e})=>s.str`should pass "${e}" keyword validation`},t.keyword$DataError={message:({keyword:e,schemaType:t})=>t?s.str`"${e}" keyword must be ${t} ($data)`:s.str`"${e}" keyword is invalid ($data)`},t.reportError=function(e,r=t.keywordError,a,o){const{it:c}=e,{gen:l,compositeRule:u,allErrors:h}=c,p=d(e,r,a);(null!=o?o:u||h)?n(l,p):i(c,s._`[${p}]`)},t.reportExtraError=function(e,r=t.keywordError,s){const{it:a}=e,{gen:c,compositeRule:l,allErrors:u}=a;n(c,d(e,r,s)),l||u||i(a,o.default.vErrors)},t.resetErrorsCount=function(e,t){e.assign(o.default.errors,t),e.if(s._`${o.default.vErrors} !== null`,(()=>e.if(t,(()=>e.assign(s._`${o.default.vErrors}.length`,t)),(()=>e.assign(o.default.vErrors,null)))))},t.extendErrors=function({gen:e,keyword:t,schemaValue:r,data:a,errsCount:n,it:i}){if(void 0===n)throw new Error("ajv implementation error");const c=e.name("err");e.forRange("i",n,o.default.errors,(n=>{e.const(c,s._`${o.default.vErrors}[${n}]`),e.if(s._`${c}.instancePath === undefined`,(()=>e.assign(s._`${c}.instancePath`,s.strConcat(o.default.instancePath,i.errorPath)))),e.assign(s._`${c}.schemaPath`,s.str`${i.errSchemaPath}/${t}`),i.opts.verbose&&(e.assign(s._`${c}.schema`,r),e.assign(s._`${c}.data`,a))}))};const c={keyword:new s.Name("keyword"),schemaPath:new s.Name("schemaPath"),params:new s.Name("params"),propertyName:new s.Name("propertyName"),message:new s.Name("message"),schema:new s.Name("schema"),parentSchema:new s.Name("parentSchema")};function d(e,t,r){const{createErrors:a}=e.it;return!1===a?s._`{}`:function(e,t,r={}){const{gen:a,it:n}=e,i=[l(n,r),u(e,r)];return function(e,{params:t,message:r},a){const{keyword:n,data:i,schemaValue:d,it:l}=e,{opts:u,propertyName:h,topSchemaRef:p,schemaPath:f}=l;a.push([c.keyword,n],[c.params,"function"==typeof t?t(e):t||s._`{}`]),u.messages&&a.push([c.message,"function"==typeof r?r(e):r]),u.verbose&&a.push([c.schema,d],[c.parentSchema,s._`${p}${f}`],[o.default.data,i]),h&&a.push([c.propertyName,h])}(e,t,i),a.object(...i)}(e,t,r)}function l({errorPath:e},{instancePath:t}){const r=t?s.str`${e}${a.getErrorPath(t,a.Type.Str)}`:e;return[o.default.instancePath,s.strConcat(o.default.instancePath,r)]}function u({keyword:e,it:{errSchemaPath:t}},{schemaPath:r,parentSchema:o}){let n=o?t:s.str`${t}/${e}`;return r&&(n=s.str`${n}${a.getErrorPath(r,a.Type.Str)}`),[c.schemaPath,n]}},5173:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resolveSchema=t.getCompilingSchema=t.resolveRef=t.compileSchema=t.SchemaEnv=void 0;const s=r(3487),a=r(7426),o=r(2141),n=r(2531),i=r(6776),c=r(4815),d=r(540);class l{constructor(e){var t;let r;this.refs={},this.dynamicAnchors={},"object"==typeof e.schema&&(r=e.schema),this.schema=e.schema,this.schemaId=e.schemaId,this.root=e.root||this,this.baseId=null!==(t=e.baseId)&&void 0!==t?t:n.normalizeId(null==r?void 0:r[e.schemaId||"$id"]),this.schemaPath=e.schemaPath,this.localRefs=e.localRefs,this.meta=e.meta,this.$async=null==r?void 0:r.$async,this.refs={}}}function u(e){const t=p.call(this,e);if(t)return t;const r=n.getFullPath(e.root.baseId),{es5:i,lines:d}=this.opts.code,{ownProperties:l}=this.opts,u=new s.CodeGen(this.scope,{es5:i,lines:d,ownProperties:l});let h;e.$async&&(h=u.scopeValue("Error",{ref:a.default,code:s._`require("ajv/dist/runtime/validation_error").default`}));const f=u.scopeName("validate");e.validateName=f;const m={gen:u,allErrors:this.opts.allErrors,data:o.default.data,parentData:o.default.parentData,parentDataProperty:o.default.parentDataProperty,dataNames:[o.default.data],dataPathArr:[s.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:u.scopeValue("schema",!0===this.opts.code.source?{ref:e.schema,code:s.stringify(e.schema)}:{ref:e.schema}),validateName:f,ValidationError:h,schema:e.schema,schemaEnv:e,rootId:r,baseId:e.baseId||r,schemaPath:s.nil,errSchemaPath:e.schemaPath||(this.opts.jtd?"":"#"),errorPath:s._`""`,opts:this.opts,self:this};let y;try{this._compilations.add(e),c.validateFunctionCode(m),u.optimize(this.opts.code.optimize);const t=u.toString();y=`${u.scopeRefs(o.default.scope)}return ${t}`,this.opts.code.process&&(y=this.opts.code.process(y,e));const r=new Function(""+o.default.self,""+o.default.scope,y)(this,this.scope.get());if(this.scope.value(f,{ref:r}),r.errors=null,r.schema=e.schema,r.schemaEnv=e,e.$async&&(r.$async=!0),!0===this.opts.code.source&&(r.source={validateName:f,validateCode:t,scopeValues:u._values}),this.opts.unevaluated){const{props:e,items:t}=m;r.evaluated={props:e instanceof s.Name?void 0:e,items:t instanceof s.Name?void 0:t,dynamicProps:e instanceof s.Name,dynamicItems:t instanceof s.Name},r.source&&(r.source.evaluated=s.stringify(r.evaluated))}return e.validate=r,e}catch(t){throw delete e.validate,delete e.validateName,y&&this.logger.error("Error compiling schema, function code:",y),t}finally{this._compilations.delete(e)}}function h(e){return n.inlineRef(e.schema,this.opts.inlineRefs)?e.schema:e.validate?e:u.call(this,e)}function p(e){for(const s of this._compilations)if(r=e,(t=s).schema===r.schema&&t.root===r.root&&t.baseId===r.baseId)return s;var t,r}function f(e,t){let r;for(;"string"==typeof(r=this.refs[t]);)t=r;return r||this.schemas[t]||m.call(this,e,t)}function m(e,t){const r=d.parse(t),s=n._getFullPath(r);let a=n.getFullPath(e.baseId);if(Object.keys(e.schema).length>0&&s===a)return g.call(this,r,e);const o=n.normalizeId(s),i=this.refs[o]||this.schemas[o];if("string"==typeof i){const t=m.call(this,e,i);if("object"!=typeof(null==t?void 0:t.schema))return;return g.call(this,r,t)}if("object"==typeof(null==i?void 0:i.schema)){if(i.validate||u.call(this,i),o===n.normalizeId(t)){const{schema:t}=i,{schemaId:r}=this.opts,s=t[r];return s&&(a=n.resolveUrl(a,s)),new l({schema:t,schemaId:r,root:e,baseId:a})}return g.call(this,r,i)}}t.SchemaEnv=l,t.compileSchema=u,t.resolveRef=function(e,t,r){var s;r=n.resolveUrl(t,r);const a=e.refs[r];if(a)return a;let o=f.call(this,e,r);if(void 0===o){const a=null===(s=e.localRefs)||void 0===s?void 0:s[r],{schemaId:n}=this.opts;a&&(o=new l({schema:a,schemaId:n,root:e,baseId:t}))}return void 0!==o?e.refs[r]=h.call(this,o):void 0},t.getCompilingSchema=p,t.resolveSchema=m;const y=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function g(e,{baseId:t,schema:r,root:s}){var a;if("/"!==(null===(a=e.fragment)||void 0===a?void 0:a[0]))return;for(const s of e.fragment.slice(1).split("/")){if("boolean"==typeof r)return;if(void 0===(r=r[i.unescapeFragment(s)]))return;const e="object"==typeof r&&r[this.opts.schemaId];!y.has(s)&&e&&(t=n.resolveUrl(t,e))}let o;if("boolean"!=typeof r&&r.$ref&&!i.schemaHasRulesButRef(r,this.RULES)){const e=n.resolveUrl(t,r.$ref);o=m.call(this,s,e)}const{schemaId:c}=this.opts;return o=o||new l({schema:r,schemaId:c,root:s,baseId:t}),o.schema!==o.root.schema?o:void 0}},2141:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a={data:new s.Name("data"),valCxt:new s.Name("valCxt"),instancePath:new s.Name("instancePath"),parentData:new s.Name("parentData"),parentDataProperty:new s.Name("parentDataProperty"),rootData:new s.Name("rootData"),dynamicAnchors:new s.Name("dynamicAnchors"),vErrors:new s.Name("vErrors"),errors:new s.Name("errors"),this:new s.Name("this"),self:new s.Name("self"),scope:new s.Name("scope"),json:new s.Name("json"),jsonPos:new s.Name("jsonPos"),jsonLen:new s.Name("jsonLen"),jsonPart:new s.Name("jsonPart")};t.default=a},6646:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(2531);class a extends Error{constructor(e,t,r){super(r||`can't resolve reference ${t} from id ${e}`),this.missingRef=s.resolveUrl(e,t),this.missingSchema=s.normalizeId(s.getFullPath(this.missingRef))}}t.default=a},2531:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSchemaRefs=t.resolveUrl=t.normalizeId=t._getFullPath=t.getFullPath=t.inlineRef=void 0;const s=r(6776),a=r(4063),o=r(9461),n=r(540),i=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]);t.inlineRef=function(e,t=!0){return"boolean"==typeof e||(!0===t?!d(e):!!t&&l(e)<=t)};const c=new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"]);function d(e){for(const t in e){if(c.has(t))return!0;const r=e[t];if(Array.isArray(r)&&r.some(d))return!0;if("object"==typeof r&&d(r))return!0}return!1}function l(e){let t=0;for(const r in e){if("$ref"===r)return 1/0;if(t++,!i.has(r)&&("object"==typeof e[r]&&s.eachItem(e[r],(e=>t+=l(e))),t===1/0))return 1/0}return t}function u(e="",t){return!1!==t&&(e=f(e)),h(n.parse(e))}function h(e){return n.serialize(e).split("#")[0]+"#"}t.getFullPath=u,t._getFullPath=h;const p=/#\/?$/;function f(e){return e?e.replace(p,""):""}t.normalizeId=f,t.resolveUrl=function(e,t){return t=f(t),n.resolve(e,t)};const m=/^[a-z_][-a-z0-9._]*$/i;t.getSchemaRefs=function(e){if("boolean"==typeof e)return{};const{schemaId:t}=this.opts,r=f(e[t]),s={"":r},i=u(r,!1),c={},d=new Set;return o(e,{allKeys:!0},((e,r,a,o)=>{if(void 0===o)return;const u=i+r;let p=s[o];function y(t){if(t=f(p?n.resolve(p,t):t),d.has(t))throw h(t);d.add(t);let r=this.refs[t];return"string"==typeof r&&(r=this.refs[r]),"object"==typeof r?l(e,r.schema,t):t!==f(u)&&("#"===t[0]?(l(e,c[t],t),c[t]=e):this.refs[t]=u),t}function g(e){if("string"==typeof e){if(!m.test(e))throw new Error(`invalid anchor "${e}"`);y.call(this,"#"+e)}}"string"==typeof e[t]&&(p=y.call(this,e[t])),g.call(this,e.$anchor),g.call(this,e.$dynamicAnchor),s[r]=p})),c;function l(e,t,r){if(void 0!==t&&!a(e,t))throw h(r)}function h(e){return new Error(`reference "${e}" resolves to more than one schema`)}}},3141:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRules=t.isJSONType=void 0;const r=new Set(["string","number","integer","boolean","null","object","array"]);t.isJSONType=function(e){return"string"==typeof e&&r.has(e)},t.getRules=function(){const e={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return{types:{...e,integer:!0,boolean:!0,null:!0},rules:[{rules:[]},e.number,e.string,e.array,e.object],post:{rules:[]},all:{},keywords:{}}}},6776:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkStrictMode=t.getErrorPath=t.Type=t.useFunc=t.setEvaluated=t.evaluatedPropsToName=t.mergeEvaluated=t.eachItem=t.unescapeJsonPointer=t.escapeJsonPointer=t.escapeFragment=t.unescapeFragment=t.schemaRefOrVal=t.schemaHasRulesButRef=t.schemaHasRules=t.checkUnknownRules=t.alwaysValidSchema=t.toHash=void 0;const s=r(3487),a=r(7023);function o(e,t=e.schema){const{opts:r,self:s}=e;if(!r.strictSchema)return;if("boolean"==typeof t)return;const a=s.RULES.keywords;for(const r in t)a[r]||f(e,`unknown keyword: "${r}"`)}function n(e,t){if("boolean"==typeof e)return!e;for(const r in e)if(t[r])return!0;return!1}function i(e){return"number"==typeof e?""+e:e.replace(/~/g,"~0").replace(/\//g,"~1")}function c(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function d({mergeNames:e,mergeToName:t,mergeValues:r,resultToName:a}){return(o,n,i,c)=>{const d=void 0===i?n:i instanceof s.Name?(n instanceof s.Name?e(o,n,i):t(o,n,i),i):n instanceof s.Name?(t(o,i,n),n):r(n,i);return c!==s.Name||d instanceof s.Name?d:a(o,d)}}function l(e,t){if(!0===t)return e.var("props",!0);const r=e.var("props",s._`{}`);return void 0!==t&&u(e,r,t),r}function u(e,t,r){Object.keys(r).forEach((r=>e.assign(s._`${t}${s.getProperty(r)}`,!0)))}t.toHash=function(e){const t={};for(const r of e)t[r]=!0;return t},t.alwaysValidSchema=function(e,t){return"boolean"==typeof t?t:0===Object.keys(t).length||(o(e,t),!n(t,e.self.RULES.all))},t.checkUnknownRules=o,t.schemaHasRules=n,t.schemaHasRulesButRef=function(e,t){if("boolean"==typeof e)return!e;for(const r in e)if("$ref"!==r&&t.all[r])return!0;return!1},t.schemaRefOrVal=function({topSchemaRef:e,schemaPath:t},r,a,o){if(!o){if("number"==typeof r||"boolean"==typeof r)return r;if("string"==typeof r)return s._`${r}`}return s._`${e}${t}${s.getProperty(a)}`},t.unescapeFragment=function(e){return c(decodeURIComponent(e))},t.escapeFragment=function(e){return encodeURIComponent(i(e))},t.escapeJsonPointer=i,t.unescapeJsonPointer=c,t.eachItem=function(e,t){if(Array.isArray(e))for(const r of e)t(r);else t(e)},t.mergeEvaluated={props:d({mergeNames:(e,t,r)=>e.if(s._`${r} !== true && ${t} !== undefined`,(()=>{e.if(s._`${t} === true`,(()=>e.assign(r,!0)),(()=>e.assign(r,s._`${r} || {}`).code(s._`Object.assign(${r}, ${t})`)))})),mergeToName:(e,t,r)=>e.if(s._`${r} !== true`,(()=>{!0===t?e.assign(r,!0):(e.assign(r,s._`${r} || {}`),u(e,r,t))})),mergeValues:(e,t)=>!0===e||{...e,...t},resultToName:l}),items:d({mergeNames:(e,t,r)=>e.if(s._`${r} !== true && ${t} !== undefined`,(()=>e.assign(r,s._`${t} === true ? true : ${r} > ${t} ? ${r} : ${t}`))),mergeToName:(e,t,r)=>e.if(s._`${r} !== true`,(()=>e.assign(r,!0===t||s._`${r} > ${t} ? ${r} : ${t}`))),mergeValues:(e,t)=>!0===e||Math.max(e,t),resultToName:(e,t)=>e.var("items",t)})},t.evaluatedPropsToName=l,t.setEvaluated=u;const h={};var p;function f(e,t,r=e.opts.strictSchema){if(r){if(t="strict mode: "+t,!0===r)throw new Error(t);e.self.logger.warn(t)}}t.useFunc=function(e,t){return e.scopeValue("func",{ref:t,code:h[t.code]||(h[t.code]=new a._Code(t.code))})},function(e){e[e.Num=0]="Num",e[e.Str=1]="Str"}(p=t.Type||(t.Type={})),t.getErrorPath=function(e,t,r){if(e instanceof s.Name){const a=t===p.Num;return r?a?s._`"[" + ${e} + "]"`:s._`"['" + ${e} + "']"`:a?s._`"/" + ${e}`:s._`"/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`}return r?s.getProperty(e).toString():"/"+i(e)},t.checkStrictMode=f},8876:(e,t)=>{"use strict";function r(e,t){return t.rules.some((t=>s(e,t)))}function s(e,t){var r;return void 0!==e[t.keyword]||(null===(r=t.definition.implements)||void 0===r?void 0:r.some((t=>void 0!==e[t])))}Object.defineProperty(t,"__esModule",{value:!0}),t.shouldUseRule=t.shouldUseGroup=t.schemaHasRulesForType=void 0,t.schemaHasRulesForType=function({schema:e,self:t},s){const a=t.RULES.types[s];return a&&!0!==a&&r(e,a)},t.shouldUseGroup=r,t.shouldUseRule=s},5667:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.boolOrEmptySchema=t.topBoolOrEmptySchema=void 0;const s=r(4181),a=r(3487),o=r(2141),n={message:"boolean schema is false"};function i(e,t){const{gen:r,data:a}=e,o={gen:r,keyword:"false schema",data:a,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:e};s.reportError(o,n,void 0,t)}t.topBoolOrEmptySchema=function(e){const{gen:t,schema:r,validateName:s}=e;!1===r?i(e,!1):"object"==typeof r&&!0===r.$async?t.return(o.default.data):(t.assign(a._`${s}.errors`,null),t.return(!0))},t.boolOrEmptySchema=function(e,t){const{gen:r,schema:s}=e;!1===s?(r.var(t,!1),i(e)):r.var(t,!0)}},453:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reportTypeError=t.checkDataTypes=t.checkDataType=t.coerceAndCheckDataType=t.getJSONTypes=t.getSchemaTypes=t.DataType=void 0;const s=r(3141),a=r(8876),o=r(4181),n=r(3487),i=r(6776);var c;function d(e){const t=Array.isArray(e)?e:e?[e]:[];if(t.every(s.isJSONType))return t;throw new Error("type must be JSONType or JSONType[]: "+t.join(","))}!function(e){e[e.Correct=0]="Correct",e[e.Wrong=1]="Wrong"}(c=t.DataType||(t.DataType={})),t.getSchemaTypes=function(e){const t=d(e.type);if(t.includes("null")){if(!1===e.nullable)throw new Error("type: null contradicts nullable: false")}else{if(!t.length&&void 0!==e.nullable)throw new Error('"nullable" cannot be used without "type"');!0===e.nullable&&t.push("null")}return t},t.getJSONTypes=d,t.coerceAndCheckDataType=function(e,t){const{gen:r,data:s,opts:o}=e,i=function(e,t){return t?e.filter((e=>l.has(e)||"array"===t&&"array"===e)):[]}(t,o.coerceTypes),d=t.length>0&&!(0===i.length&&1===t.length&&a.schemaHasRulesForType(e,t[0]));if(d){const a=h(t,s,o.strictNumbers,c.Wrong);r.if(a,(()=>{i.length?function(e,t,r){const{gen:s,data:a,opts:o}=e,i=s.let("dataType",n._`typeof ${a}`),c=s.let("coerced",n._`undefined`);"array"===o.coerceTypes&&s.if(n._`${i} == 'object' && Array.isArray(${a}) && ${a}.length == 1`,(()=>s.assign(a,n._`${a}[0]`).assign(i,n._`typeof ${a}`).if(h(t,a,o.strictNumbers),(()=>s.assign(c,a))))),s.if(n._`${c} !== undefined`);for(const e of r)(l.has(e)||"array"===e&&"array"===o.coerceTypes)&&d(e);function d(e){switch(e){case"string":return void s.elseIf(n._`${i} == "number" || ${i} == "boolean"`).assign(c,n._`"" + ${a}`).elseIf(n._`${a} === null`).assign(c,n._`""`);case"number":return void s.elseIf(n._`${i} == "boolean" || ${a} === null
              || (${i} == "string" && ${a} && ${a} == +${a})`).assign(c,n._`+${a}`);case"integer":return void s.elseIf(n._`${i} === "boolean" || ${a} === null
              || (${i} === "string" && ${a} && ${a} == +${a} && !(${a} % 1))`).assign(c,n._`+${a}`);case"boolean":return void s.elseIf(n._`${a} === "false" || ${a} === 0 || ${a} === null`).assign(c,!1).elseIf(n._`${a} === "true" || ${a} === 1`).assign(c,!0);case"null":return s.elseIf(n._`${a} === "" || ${a} === 0 || ${a} === false`),void s.assign(c,null);case"array":s.elseIf(n._`${i} === "string" || ${i} === "number"
              || ${i} === "boolean" || ${a} === null`).assign(c,n._`[${a}]`)}}s.else(),f(e),s.endIf(),s.if(n._`${c} !== undefined`,(()=>{s.assign(a,c),function({gen:e,parentData:t,parentDataProperty:r},s){e.if(n._`${t} !== undefined`,(()=>e.assign(n._`${t}[${r}]`,s)))}(e,c)}))}(e,t,i):f(e)}))}return d};const l=new Set(["string","number","integer","boolean","null"]);function u(e,t,r,s=c.Correct){const a=s===c.Correct?n.operators.EQ:n.operators.NEQ;let o;switch(e){case"null":return n._`${t} ${a} null`;case"array":o=n._`Array.isArray(${t})`;break;case"object":o=n._`${t} && typeof ${t} == "object" && !Array.isArray(${t})`;break;case"integer":o=i(n._`!(${t} % 1) && !isNaN(${t})`);break;case"number":o=i();break;default:return n._`typeof ${t} ${a} ${e}`}return s===c.Correct?o:n.not(o);function i(e=n.nil){return n.and(n._`typeof ${t} == "number"`,e,r?n._`isFinite(${t})`:n.nil)}}function h(e,t,r,s){if(1===e.length)return u(e[0],t,r,s);let a;const o=i.toHash(e);if(o.array&&o.object){const e=n._`typeof ${t} != "object"`;a=o.null?e:n._`!${t} || ${e}`,delete o.null,delete o.array,delete o.object}else a=n.nil;o.number&&delete o.integer;for(const e in o)a=n.and(a,u(e,t,r,s));return a}t.checkDataType=u,t.checkDataTypes=h;const p={message:({schema:e})=>"must be "+e,params:({schema:e,schemaValue:t})=>"string"==typeof e?n._`{type: ${e}}`:n._`{type: ${t}}`};function f(e){const t=function(e){const{gen:t,data:r,schema:s}=e,a=i.schemaRefOrVal(e,s,"type");return{gen:t,keyword:"type",data:r,schema:s.type,schemaCode:a,schemaValue:a,parentSchema:s,params:{},it:e}}(e);o.reportError(t,p)}t.reportTypeError=f},313:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assignDefaults=void 0;const s=r(3487),a=r(6776);function o(e,t,r){const{gen:o,compositeRule:n,data:i,opts:c}=e;if(void 0===r)return;const d=s._`${i}${s.getProperty(t)}`;if(n)return void a.checkStrictMode(e,"default is ignored for: "+d);let l=s._`${d} === undefined`;"empty"===c.useDefaults&&(l=s._`${l} || ${d} === null || ${d} === ""`),o.if(l,s._`${d} = ${s.stringify(r)}`)}t.assignDefaults=function(e,t){const{properties:r,items:s}=e.schema;if("object"===t&&r)for(const t in r)o(e,t,r[t].default);else"array"===t&&Array.isArray(s)&&s.forEach(((t,r)=>o(e,r,t.default)))}},4815:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getData=t.KeywordCxt=t.validateFunctionCode=void 0;const s=r(5667),a=r(453),o=r(8876),n=r(453),i=r(313),c=r(5005),d=r(3099),l=r(3487),u=r(2141),h=r(2531),p=r(6776),f=r(4181);function m({gen:e,validateName:t,schema:r,schemaEnv:s,opts:a},o){a.code.es5?e.func(t,l._`${u.default.data}, ${u.default.valCxt}`,s.$async,(()=>{e.code(l._`"use strict"; ${y(r,a)}`),function(e,t){e.if(u.default.valCxt,(()=>{e.var(u.default.instancePath,l._`${u.default.valCxt}.${u.default.instancePath}`),e.var(u.default.parentData,l._`${u.default.valCxt}.${u.default.parentData}`),e.var(u.default.parentDataProperty,l._`${u.default.valCxt}.${u.default.parentDataProperty}`),e.var(u.default.rootData,l._`${u.default.valCxt}.${u.default.rootData}`),t.dynamicRef&&e.var(u.default.dynamicAnchors,l._`${u.default.valCxt}.${u.default.dynamicAnchors}`)}),(()=>{e.var(u.default.instancePath,l._`""`),e.var(u.default.parentData,l._`undefined`),e.var(u.default.parentDataProperty,l._`undefined`),e.var(u.default.rootData,u.default.data),t.dynamicRef&&e.var(u.default.dynamicAnchors,l._`{}`)}))}(e,a),e.code(o)})):e.func(t,l._`${u.default.data}, ${function(e){return l._`{${u.default.instancePath}="", ${u.default.parentData}, ${u.default.parentDataProperty}, ${u.default.rootData}=${u.default.data}${e.dynamicRef?l._`, ${u.default.dynamicAnchors}={}`:l.nil}}={}`}(a)}`,s.$async,(()=>e.code(y(r,a)).code(o)))}function y(e,t){const r="object"==typeof e&&e[t.schemaId];return r&&(t.code.source||t.code.process)?l._`/*# sourceURL=${r} */`:l.nil}function g({schema:e,self:t}){if("boolean"==typeof e)return!e;for(const r in e)if(t.RULES.all[r])return!0;return!1}function v(e){return"boolean"!=typeof e.schema}function w(e){p.checkUnknownRules(e),function(e){const{schema:t,errSchemaPath:r,opts:s,self:a}=e;t.$ref&&s.ignoreKeywordsWithRef&&p.schemaHasRulesButRef(t,a.RULES)&&a.logger.warn(`$ref: keywords ignored in schema at path "${r}"`)}(e)}function $(e,t){if(e.opts.jtd)return b(e,[],!1,t);const r=a.getSchemaTypes(e.schema);b(e,r,!a.coerceAndCheckDataType(e,r),t)}function _({gen:e,schemaEnv:t,schema:r,errSchemaPath:s,opts:a}){const o=r.$comment;if(!0===a.$comment)e.code(l._`${u.default.self}.logger.log(${o})`);else if("function"==typeof a.$comment){const r=l.str`${s}/$comment`,a=e.scopeValue("root",{ref:t.root});e.code(l._`${u.default.self}.opts.$comment(${o}, ${r}, ${a}.schema)`)}}function b(e,t,r,s){const{gen:a,schema:i,data:c,allErrors:d,opts:h,self:f}=e,{RULES:m}=f;function y(p){o.shouldUseGroup(i,p)&&(p.type?(a.if(n.checkDataType(p.type,c,h.strictNumbers)),S(e,p),1===t.length&&t[0]===p.type&&r&&(a.else(),n.reportTypeError(e)),a.endIf()):S(e,p),d||a.if(l._`${u.default.errors} === ${s||0}`))}!i.$ref||!h.ignoreKeywordsWithRef&&p.schemaHasRulesButRef(i,m)?(h.jtd||function(e,t){!e.schemaEnv.meta&&e.opts.strictTypes&&(function(e,t){t.length&&(e.dataTypes.length?(t.forEach((t=>{E(e.dataTypes,t)||P(e,`type "${t}" not allowed by context "${e.dataTypes.join(",")}"`)})),e.dataTypes=e.dataTypes.filter((e=>E(t,e)))):e.dataTypes=t)}(e,t),e.opts.allowUnionTypes||function(e,t){t.length>1&&(2!==t.length||!t.includes("null"))&&P(e,"use allowUnionTypes to allow union type keyword")}(e,t),function(e,t){const r=e.self.RULES.all;for(const s in r){const a=r[s];if("object"==typeof a&&o.shouldUseRule(e.schema,a)){const{type:r}=a.definition;r.length&&!r.some((e=>{return s=e,(r=t).includes(s)||"number"===s&&r.includes("integer");var r,s}))&&P(e,`missing type "${r.join(",")}" for keyword "${s}"`)}}}(e,e.dataTypes))}(e,t),a.block((()=>{for(const e of m.rules)y(e);y(m.post)}))):a.block((()=>k(e,"$ref",m.all.$ref.definition)))}function S(e,t){const{gen:r,schema:s,opts:{useDefaults:a}}=e;a&&i.assignDefaults(e,t.type),r.block((()=>{for(const r of t.rules)o.shouldUseRule(s,r)&&k(e,r.keyword,r.definition,t.type)}))}function E(e,t){return e.includes(t)||"integer"===t&&e.includes("number")}function P(e,t){t+=` at "${e.schemaEnv.baseId+e.errSchemaPath}" (strictTypes)`,p.checkStrictMode(e,t,e.opts.strictTypes)}t.validateFunctionCode=function(e){v(e)&&(w(e),g(e))?function(e){const{schema:t,opts:r,gen:s}=e;m(e,(()=>{r.$comment&&t.$comment&&_(e),function(e){const{schema:t,opts:r}=e;void 0!==t.default&&r.useDefaults&&r.strictSchema&&p.checkStrictMode(e,"default is ignored in the schema root")}(e),s.let(u.default.vErrors,null),s.let(u.default.errors,0),r.unevaluated&&function(e){const{gen:t,validateName:r}=e;e.evaluated=t.const("evaluated",l._`${r}.evaluated`),t.if(l._`${e.evaluated}.dynamicProps`,(()=>t.assign(l._`${e.evaluated}.props`,l._`undefined`))),t.if(l._`${e.evaluated}.dynamicItems`,(()=>t.assign(l._`${e.evaluated}.items`,l._`undefined`)))}(e),$(e),function(e){const{gen:t,schemaEnv:r,validateName:s,ValidationError:a,opts:o}=e;r.$async?t.if(l._`${u.default.errors} === 0`,(()=>t.return(u.default.data)),(()=>t.throw(l._`new ${a}(${u.default.vErrors})`))):(t.assign(l._`${s}.errors`,u.default.vErrors),o.unevaluated&&function({gen:e,evaluated:t,props:r,items:s}){r instanceof l.Name&&e.assign(l._`${t}.props`,r),s instanceof l.Name&&e.assign(l._`${t}.items`,s)}(e),t.return(l._`${u.default.errors} === 0`))}(e)}))}(e):m(e,(()=>s.topBoolOrEmptySchema(e)))};class T{constructor(e,t,r){if(c.validateKeywordUsage(e,t,r),this.gen=e.gen,this.allErrors=e.allErrors,this.keyword=r,this.data=e.data,this.schema=e.schema[r],this.$data=t.$data&&e.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=p.schemaRefOrVal(e,this.schema,r,this.$data),this.schemaType=t.schemaType,this.parentSchema=e.schema,this.params={},this.it=e,this.def=t,this.$data)this.schemaCode=e.gen.const("vSchema",C(this.$data,e));else if(this.schemaCode=this.schemaValue,!c.validSchemaType(this.schema,t.schemaType,t.allowUndefined))throw new Error(`${r} value must be ${JSON.stringify(t.schemaType)}`);("code"in t?t.trackErrors:!1!==t.errors)&&(this.errsCount=e.gen.const("_errs",u.default.errors))}result(e,t,r){this.gen.if(l.not(e)),r?r():this.error(),t?(this.gen.else(),t(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else()}pass(e,t){this.result(e,void 0,t)}fail(e){if(void 0===e)return this.error(),void(this.allErrors||this.gen.if(!1));this.gen.if(e),this.error(),this.allErrors?this.gen.endIf():this.gen.else()}fail$data(e){if(!this.$data)return this.fail(e);const{schemaCode:t}=this;this.fail(l._`${t} !== undefined && (${l.or(this.invalid$data(),e)})`)}error(e,t,r){if(t)return this.setParams(t),this._error(e,r),void this.setParams({});this._error(e,r)}_error(e,t){(e?f.reportExtraError:f.reportError)(this,this.def.error,t)}$dataError(){f.reportError(this,this.def.$dataError||f.keyword$DataError)}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');f.resetErrorsCount(this.gen,this.errsCount)}ok(e){this.allErrors||this.gen.if(e)}setParams(e,t){t?Object.assign(this.params,e):this.params=e}block$data(e,t,r=l.nil){this.gen.block((()=>{this.check$data(e,r),t()}))}check$data(e=l.nil,t=l.nil){if(!this.$data)return;const{gen:r,schemaCode:s,schemaType:a,def:o}=this;r.if(l.or(l._`${s} === undefined`,t)),e!==l.nil&&r.assign(e,!0),(a.length||o.validateSchema)&&(r.elseIf(this.invalid$data()),this.$dataError(),e!==l.nil&&r.assign(e,!1)),r.else()}invalid$data(){const{gen:e,schemaCode:t,schemaType:r,def:s,it:a}=this;return l.or(function(){if(r.length){if(!(t instanceof l.Name))throw new Error("ajv implementation error");const e=Array.isArray(r)?r:[r];return l._`${n.checkDataTypes(e,t,a.opts.strictNumbers,n.DataType.Wrong)}`}return l.nil}(),function(){if(s.validateSchema){const r=e.scopeValue("validate$data",{ref:s.validateSchema});return l._`!${r}(${t})`}return l.nil}())}subschema(e,t){const r=d.getSubschema(this.it,e);d.extendSubschemaData(r,this.it,e),d.extendSubschemaMode(r,e);const a={...this.it,...r,items:void 0,props:void 0};return function(e,t){v(e)&&(w(e),g(e))?function(e,t){const{schema:r,gen:s,opts:a}=e;a.$comment&&r.$comment&&_(e),function(e){const t=e.schema[e.opts.schemaId];t&&(e.baseId=h.resolveUrl(e.baseId,t))}(e),function(e){if(e.schema.$async&&!e.schemaEnv.$async)throw new Error("async schema in sync schema")}(e);const o=s.const("_errs",u.default.errors);$(e,o),s.var(t,l._`${o} === ${u.default.errors}`)}(e,t):s.boolOrEmptySchema(e,t)}(a,t),a}mergeEvaluated(e,t){const{it:r,gen:s}=this;r.opts.unevaluated&&(!0!==r.props&&void 0!==e.props&&(r.props=p.mergeEvaluated.props(s,e.props,r.props,t)),!0!==r.items&&void 0!==e.items&&(r.items=p.mergeEvaluated.items(s,e.items,r.items,t)))}mergeValidEvaluated(e,t){const{it:r,gen:s}=this;if(r.opts.unevaluated&&(!0!==r.props||!0!==r.items))return s.if(t,(()=>this.mergeEvaluated(e,l.Name))),!0}}function k(e,t,r,s){const a=new T(e,r,t);"code"in r?r.code(a,s):a.$data&&r.validate?c.funcKeywordCode(a,r):"macro"in r?c.macroKeywordCode(a,r):(r.compile||r.validate)&&c.funcKeywordCode(a,r)}t.KeywordCxt=T;const O=/^\/(?:[^~]|~0|~1)*$/,x=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function C(e,{dataLevel:t,dataNames:r,dataPathArr:s}){let a,o;if(""===e)return u.default.rootData;if("/"===e[0]){if(!O.test(e))throw new Error("Invalid JSON-pointer: "+e);a=e,o=u.default.rootData}else{const n=x.exec(e);if(!n)throw new Error("Invalid JSON-pointer: "+e);const i=+n[1];if(a=n[2],"#"===a){if(i>=t)throw new Error(c("property/index",i));return s[t-i]}if(i>t)throw new Error(c("data",i));if(o=r[t-i],!a)return o}let n=o;const i=a.split("/");for(const e of i)e&&(o=l._`${o}${l.getProperty(p.unescapeJsonPointer(e))}`,n=l._`${n} && ${o}`);return n;function c(e,r){return`Cannot access ${e} ${r} levels up, current level is ${t}`}}t.getData=C},5005:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateKeywordUsage=t.validSchemaType=t.funcKeywordCode=t.macroKeywordCode=void 0;const s=r(3487),a=r(2141),o=r(412),n=r(4181);function i(e){const{gen:t,data:r,it:a}=e;t.if(a.parentData,(()=>t.assign(r,s._`${a.parentData}[${a.parentDataProperty}]`)))}function c(e,t,r){if(void 0===r)throw new Error(`keyword "${t}" failed to compile`);return e.scopeValue("keyword","function"==typeof r?{ref:r}:{ref:r,code:s.stringify(r)})}t.macroKeywordCode=function(e,t){const{gen:r,keyword:a,schema:o,parentSchema:n,it:i}=e,d=t.macro.call(i.self,o,n,i),l=c(r,a,d);!1!==i.opts.validateSchema&&i.self.validateSchema(d,!0);const u=r.name("valid");e.subschema({schema:d,schemaPath:s.nil,errSchemaPath:`${i.errSchemaPath}/${a}`,topSchemaRef:l,compositeRule:!0},u),e.pass(u,(()=>e.error(!0)))},t.funcKeywordCode=function(e,t){var r;const{gen:d,keyword:l,schema:u,parentSchema:h,$data:p,it:f}=e;!function({schemaEnv:e},t){if(t.async&&!e.$async)throw new Error("async keyword in sync schema")}(f,t);const m=!p&&t.compile?t.compile.call(f.self,u,h,f):t.validate,y=c(d,l,m),g=d.let("valid");function v(r=(t.async?s._`await `:s.nil)){const n=f.opts.passContext?a.default.this:a.default.self,i=!("compile"in t&&!p||!1===t.schema);d.assign(g,s._`${r}${o.callValidateCode(e,y,n,i)}`,t.modifying)}function w(e){var r;d.if(s.not(null!==(r=t.valid)&&void 0!==r?r:g),e)}e.block$data(g,(function(){if(!1===t.errors)v(),t.modifying&&i(e),w((()=>e.error()));else{const r=t.async?function(){const e=d.let("ruleErrs",null);return d.try((()=>v(s._`await `)),(t=>d.assign(g,!1).if(s._`${t} instanceof ${f.ValidationError}`,(()=>d.assign(e,s._`${t}.errors`)),(()=>d.throw(t))))),e}():function(){const e=s._`${y}.errors`;return d.assign(e,null),v(s.nil),e}();t.modifying&&i(e),w((()=>function(e,t){const{gen:r}=e;r.if(s._`Array.isArray(${t})`,(()=>{r.assign(a.default.vErrors,s._`${a.default.vErrors} === null ? ${t} : ${a.default.vErrors}.concat(${t})`).assign(a.default.errors,s._`${a.default.vErrors}.length`),n.extendErrors(e)}),(()=>e.error()))}(e,r)))}})),e.ok(null!==(r=t.valid)&&void 0!==r?r:g)},t.validSchemaType=function(e,t,r=!1){return!t.length||t.some((t=>"array"===t?Array.isArray(e):"object"===t?e&&"object"==typeof e&&!Array.isArray(e):typeof e==t||r&&void 0===e))},t.validateKeywordUsage=function({schema:e,opts:t,self:r,errSchemaPath:s},a,o){if(Array.isArray(a.keyword)?!a.keyword.includes(o):a.keyword!==o)throw new Error("ajv implementation error");const n=a.dependencies;if(null==n?void 0:n.some((t=>!Object.prototype.hasOwnProperty.call(e,t))))throw new Error(`parent schema must have dependencies of ${o}: ${n.join(",")}`);if(a.validateSchema&&!a.validateSchema(e[o])){const e=`keyword "${o}" value is invalid at path "${s}": `+r.errorsText(a.validateSchema.errors);if("log"!==t.validateSchema)throw new Error(e);r.logger.error(e)}}},3099:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extendSubschemaMode=t.extendSubschemaData=t.getSubschema=void 0;const s=r(3487),a=r(6776);t.getSubschema=function(e,{keyword:t,schemaProp:r,schema:o,schemaPath:n,errSchemaPath:i,topSchemaRef:c}){if(void 0!==t&&void 0!==o)throw new Error('both "keyword" and "schema" passed, only one allowed');if(void 0!==t){const o=e.schema[t];return void 0===r?{schema:o,schemaPath:s._`${e.schemaPath}${s.getProperty(t)}`,errSchemaPath:`${e.errSchemaPath}/${t}`}:{schema:o[r],schemaPath:s._`${e.schemaPath}${s.getProperty(t)}${s.getProperty(r)}`,errSchemaPath:`${e.errSchemaPath}/${t}/${a.escapeFragment(r)}`}}if(void 0!==o){if(void 0===n||void 0===i||void 0===c)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return{schema:o,schemaPath:n,topSchemaRef:c,errSchemaPath:i}}throw new Error('either "keyword" or "schema" must be passed')},t.extendSubschemaData=function(e,t,{dataProp:r,dataPropType:o,data:n,dataTypes:i,propertyName:c}){if(void 0!==n&&void 0!==r)throw new Error('both "data" and "dataProp" passed, only one allowed');const{gen:d}=t;if(void 0!==r){const{errorPath:n,dataPathArr:i,opts:c}=t;l(d.let("data",s._`${t.data}${s.getProperty(r)}`,!0)),e.errorPath=s.str`${n}${a.getErrorPath(r,o,c.jsPropertySyntax)}`,e.parentDataProperty=s._`${r}`,e.dataPathArr=[...i,e.parentDataProperty]}function l(r){e.data=r,e.dataLevel=t.dataLevel+1,e.dataTypes=[],t.definedProperties=new Set,e.parentData=t.data,e.dataNames=[...t.dataNames,r]}void 0!==n&&(l(n instanceof s.Name?n:d.let("data",n,!0)),void 0!==c&&(e.propertyName=c)),i&&(e.dataTypes=i)},t.extendSubschemaMode=function(e,{jtdDiscriminator:t,jtdMetadata:r,compositeRule:s,createErrors:a,allErrors:o}){void 0!==s&&(e.compositeRule=s),void 0!==a&&(e.createErrors=a),void 0!==o&&(e.allErrors=o),e.jtdDiscriminator=t,e.jtdMetadata=r}},7159:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CodeGen=t.Name=t.nil=t.stringify=t.str=t._=t.KeywordCxt=void 0;var s=r(4815);Object.defineProperty(t,"KeywordCxt",{enumerable:!0,get:function(){return s.KeywordCxt}});var a=r(3487);Object.defineProperty(t,"_",{enumerable:!0,get:function(){return a._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return a.str}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return a.stringify}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return a.nil}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return a.Name}}),Object.defineProperty(t,"CodeGen",{enumerable:!0,get:function(){return a.CodeGen}});const o=r(7426),n=r(6646),i=r(3141),c=r(5173),d=r(3487),l=r(2531),u=r(453),h=r(6776),p=r(2228),f=["removeAdditional","useDefaults","coerceTypes"],m=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),y={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},g={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'};function v(e){var t,r,s,a,o,n,i,c,d,l,u,h,p,f,m,y,g,v,w,$,_,b;const S=e.strict,E=null===(t=e.code)||void 0===t?void 0:t.optimize,P=!0===E||void 0===E?1:E||0;return{strictSchema:null===(s=null!==(r=e.strictSchema)&&void 0!==r?r:S)||void 0===s||s,strictNumbers:null===(o=null!==(a=e.strictNumbers)&&void 0!==a?a:S)||void 0===o||o,strictTypes:null!==(i=null!==(n=e.strictTypes)&&void 0!==n?n:S)&&void 0!==i?i:"log",strictTuples:null!==(d=null!==(c=e.strictTuples)&&void 0!==c?c:S)&&void 0!==d?d:"log",strictRequired:null!==(u=null!==(l=e.strictRequired)&&void 0!==l?l:S)&&void 0!==u&&u,code:e.code?{...e.code,optimize:P}:{optimize:P},loopRequired:null!==(h=e.loopRequired)&&void 0!==h?h:200,loopEnum:null!==(p=e.loopEnum)&&void 0!==p?p:200,meta:null===(f=e.meta)||void 0===f||f,messages:null===(m=e.messages)||void 0===m||m,inlineRefs:null===(y=e.inlineRefs)||void 0===y||y,schemaId:null!==(g=e.schemaId)&&void 0!==g?g:"$id",addUsedSchema:null===(v=e.addUsedSchema)||void 0===v||v,validateSchema:null===(w=e.validateSchema)||void 0===w||w,validateFormats:null===($=e.validateFormats)||void 0===$||$,unicodeRegExp:null===(_=e.unicodeRegExp)||void 0===_||_,int32range:null===(b=e.int32range)||void 0===b||b}}class w{constructor(e={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,e=this.opts={...e,...v(e)};const{es5:t,lines:r}=this.opts.code;this.scope=new d.ValueScope({scope:{},prefixes:m,es5:t,lines:r}),this.logger=function(e){if(!1===e)return T;if(void 0===e)return console;if(e.log&&e.warn&&e.error)return e;throw new Error("logger must implement log, warn and error methods")}(e.logger);const s=e.validateFormats;e.validateFormats=!1,this.RULES=i.getRules(),$.call(this,y,e,"NOT SUPPORTED"),$.call(this,g,e,"DEPRECATED","warn"),this._metaOpts=P.call(this),e.formats&&S.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),e.keywords&&E.call(this,e.keywords),"object"==typeof e.meta&&this.addMetaSchema(e.meta),b.call(this),e.validateFormats=s}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){const{$data:e,meta:t,schemaId:r}=this.opts;let s=p;"id"===r&&(s={...p},s.id=s.$id,delete s.$id),t&&e&&this.addMetaSchema(s,s[r],!1)}defaultMeta(){const{meta:e,schemaId:t}=this.opts;return this.opts.defaultMeta="object"==typeof e?e[t]||e:void 0}validate(e,t){let r;if("string"==typeof e){if(r=this.getSchema(e),!r)throw new Error(`no schema with key or ref "${e}"`)}else r=this.compile(e);const s=r(t);return"$async"in r||(this.errors=r.errors),s}compile(e,t){const r=this._addSchema(e,t);return r.validate||this._compileSchemaEnv(r)}compileAsync(e,t){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");const{loadSchema:r}=this.opts;return s.call(this,e,t);async function s(e,t){await a.call(this,e.$schema);const r=this._addSchema(e,t);return r.validate||o.call(this,r)}async function a(e){e&&!this.getSchema(e)&&await s.call(this,{$ref:e},!0)}async function o(e){try{return this._compileSchemaEnv(e)}catch(t){if(!(t instanceof n.default))throw t;return i.call(this,t),await c.call(this,t.missingSchema),o.call(this,e)}}function i({missingSchema:e,missingRef:t}){if(this.refs[e])throw new Error(`AnySchema ${e} is loaded but ${t} cannot be resolved`)}async function c(e){const r=await d.call(this,e);this.refs[e]||await a.call(this,r.$schema),this.refs[e]||this.addSchema(r,e,t)}async function d(e){const t=this._loading[e];if(t)return t;try{return await(this._loading[e]=r(e))}finally{delete this._loading[e]}}}addSchema(e,t,r,s=this.opts.validateSchema){if(Array.isArray(e)){for(const t of e)this.addSchema(t,void 0,r,s);return this}let a;if("object"==typeof e){const{schemaId:t}=this.opts;if(a=e[t],void 0!==a&&"string"!=typeof a)throw new Error(`schema ${t} must be string`)}return t=l.normalizeId(t||a),this._checkUnique(t),this.schemas[t]=this._addSchema(e,r,t,s,!0),this}addMetaSchema(e,t,r=this.opts.validateSchema){return this.addSchema(e,t,!0,r),this}validateSchema(e,t){if("boolean"==typeof e)return!0;let r;if(r=e.$schema,void 0!==r&&"string"!=typeof r)throw new Error("$schema must be a string");if(r=r||this.opts.defaultMeta||this.defaultMeta(),!r)return this.logger.warn("meta-schema not available"),this.errors=null,!0;const s=this.validate(r,e);if(!s&&t){const e="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(e);this.logger.error(e)}return s}getSchema(e){let t;for(;"string"==typeof(t=_.call(this,e));)e=t;if(void 0===t){const{schemaId:r}=this.opts,s=new c.SchemaEnv({schema:{},schemaId:r});if(t=c.resolveSchema.call(this,s,e),!t)return;this.refs[e]=t}return t.validate||this._compileSchemaEnv(t)}removeSchema(e){if(e instanceof RegExp)return this._removeAllSchemas(this.schemas,e),this._removeAllSchemas(this.refs,e),this;switch(typeof e){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":{const t=_.call(this,e);return"object"==typeof t&&this._cache.delete(t.schema),delete this.schemas[e],delete this.refs[e],this}case"object":{const t=e;this._cache.delete(t);let r=e[this.opts.schemaId];return r&&(r=l.normalizeId(r),delete this.schemas[r],delete this.refs[r]),this}default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(e){for(const t of e)this.addKeyword(t);return this}addKeyword(e,t){let r;if("string"==typeof e)r=e,"object"==typeof t&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),t.keyword=r);else{if("object"!=typeof e||void 0!==t)throw new Error("invalid addKeywords parameters");if(r=(t=e).keyword,Array.isArray(r)&&!r.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if(O.call(this,r,t),!t)return h.eachItem(r,(e=>x.call(this,e))),this;N.call(this,t);const s={...t,type:u.getJSONTypes(t.type),schemaType:u.getJSONTypes(t.schemaType)};return h.eachItem(r,0===s.type.length?e=>x.call(this,e,s):e=>s.type.forEach((t=>x.call(this,e,s,t)))),this}getKeyword(e){const t=this.RULES.all[e];return"object"==typeof t?t.definition:!!t}removeKeyword(e){const{RULES:t}=this;delete t.keywords[e],delete t.all[e];for(const r of t.rules){const t=r.rules.findIndex((t=>t.keyword===e));t>=0&&r.rules.splice(t,1)}return this}addFormat(e,t){return"string"==typeof t&&(t=new RegExp(t)),this.formats[e]=t,this}errorsText(e=this.errors,{separator:t=", ",dataVar:r="data"}={}){return e&&0!==e.length?e.map((e=>`${r}${e.instancePath} ${e.message}`)).reduce(((e,r)=>e+t+r)):"No errors"}$dataMetaSchema(e,t){const r=this.RULES.all;e=JSON.parse(JSON.stringify(e));for(const s of t){const t=s.split("/").slice(1);let a=e;for(const e of t)a=a[e];for(const e in r){const t=r[e];if("object"!=typeof t)continue;const{$data:s}=t.definition,o=a[e];s&&o&&(a[e]=I(o))}}return e}_removeAllSchemas(e,t){for(const r in e){const s=e[r];t&&!t.test(r)||("string"==typeof s?delete e[r]:s&&!s.meta&&(this._cache.delete(s.schema),delete e[r]))}}_addSchema(e,t,r,s=this.opts.validateSchema,a=this.opts.addUsedSchema){let o;const{schemaId:n}=this.opts;if("object"==typeof e)o=e[n];else{if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof e)throw new Error("schema must be object or boolean")}let i=this._cache.get(e);if(void 0!==i)return i;const d=l.getSchemaRefs.call(this,e);return r=l.normalizeId(o||r),i=new c.SchemaEnv({schema:e,schemaId:n,meta:t,baseId:r,localRefs:d}),this._cache.set(i.schema,i),a&&!r.startsWith("#")&&(r&&this._checkUnique(r),this.refs[r]=i),s&&this.validateSchema(e,!0),i}_checkUnique(e){if(this.schemas[e]||this.refs[e])throw new Error(`schema with key or id "${e}" already exists`)}_compileSchemaEnv(e){if(e.meta?this._compileMetaSchema(e):c.compileSchema.call(this,e),!e.validate)throw new Error("ajv implementation error");return e.validate}_compileMetaSchema(e){const t=this.opts;this.opts=this._metaOpts;try{c.compileSchema.call(this,e)}finally{this.opts=t}}}function $(e,t,r,s="error"){for(const a in e){const o=a;o in t&&this.logger[s](`${r}: option ${a}. ${e[o]}`)}}function _(e){return e=l.normalizeId(e),this.schemas[e]||this.refs[e]}function b(){const e=this.opts.schemas;if(e)if(Array.isArray(e))this.addSchema(e);else for(const t in e)this.addSchema(e[t],t)}function S(){for(const e in this.opts.formats){const t=this.opts.formats[e];t&&this.addFormat(e,t)}}function E(e){if(Array.isArray(e))this.addVocabulary(e);else{this.logger.warn("keywords option as map is deprecated, pass array");for(const t in e){const r=e[t];r.keyword||(r.keyword=t),this.addKeyword(r)}}}function P(){const e={...this.opts};for(const t of f)delete e[t];return e}t.default=w,w.ValidationError=o.default,w.MissingRefError=n.default;const T={log(){},warn(){},error(){}},k=/^[a-z_$][a-z0-9_$:-]*$/i;function O(e,t){const{RULES:r}=this;if(h.eachItem(e,(e=>{if(r.keywords[e])throw new Error(`Keyword ${e} is already defined`);if(!k.test(e))throw new Error(`Keyword ${e} has invalid name`)})),t&&t.$data&&!("code"in t)&&!("validate"in t))throw new Error('$data keyword must have "code" or "validate" function')}function x(e,t,r){var s;const a=null==t?void 0:t.post;if(r&&a)throw new Error('keyword with "post" flag cannot have "type"');const{RULES:o}=this;let n=a?o.post:o.rules.find((({type:e})=>e===r));if(n||(n={type:r,rules:[]},o.rules.push(n)),o.keywords[e]=!0,!t)return;const i={keyword:e,definition:{...t,type:u.getJSONTypes(t.type),schemaType:u.getJSONTypes(t.schemaType)}};t.before?C.call(this,n,i,t.before):n.rules.push(i),o.all[e]=i,null===(s=t.implements)||void 0===s||s.forEach((e=>this.addKeyword(e)))}function C(e,t,r){const s=e.rules.findIndex((e=>e.keyword===r));s>=0?e.rules.splice(s,0,t):(e.rules.push(t),this.logger.warn(`rule ${r} is not defined`))}function N(e){let{metaSchema:t}=e;void 0!==t&&(e.$data&&this.opts.$data&&(t=I(t)),e.validateSchema=this.compile(t,!0))}const j={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function I(e){return{anyOf:[e,j]}}},2228:e=>{"use strict";e.exports=JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}')},278:e=>{"use strict";e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}')},3510:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(4063);s.code='require("ajv/dist/runtime/equal").default',t.default=s},4499:(e,t)=>{"use strict";function r(e){const t=e.length;let r,s=0,a=0;for(;a<t;)s++,r=e.charCodeAt(a++),r>=55296&&r<=56319&&a<t&&(r=e.charCodeAt(a),56320==(64512&r)&&a++);return s}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r,r.code='require("ajv/dist/runtime/ucs2length").default'},7426:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends Error{constructor(e){super("validation failed"),this.errors=e,this.ajv=this.validation=!0}}t.default=r},4783:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateAdditionalItems=void 0;const s=r(3487),a=r(6776),o={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:{message:({params:{len:e}})=>s.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>s._`{limit: ${e}}`},code(e){const{parentSchema:t,it:r}=e,{items:s}=t;Array.isArray(s)?n(e,s):a.checkStrictMode(r,'"additionalItems" is ignored when "items" is not an array of schemas')}};function n(e,t){const{gen:r,schema:o,data:n,keyword:i,it:c}=e;c.items=!0;const d=r.const("len",s._`${n}.length`);if(!1===o)e.setParams({len:t.length}),e.pass(s._`${d} <= ${t.length}`);else if("object"==typeof o&&!a.alwaysValidSchema(c,o)){const o=r.var("valid",s._`${d} <= ${t.length}`);r.if(s.not(o),(()=>function(o){r.forRange("i",t.length,d,(t=>{e.subschema({keyword:i,dataProp:t,dataPropType:a.Type.Num},o),c.allErrors||r.if(s.not(o),(()=>r.break()))}))}(o))),e.ok(o)}}t.validateAdditionalItems=n,t.default=o},9351:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(412),a=r(3487),o=r(2141),n=r(6776),i={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:{message:"must NOT have additional properties",params:({params:e})=>a._`{additionalProperty: ${e.additionalProperty}}`},code(e){const{gen:t,schema:r,parentSchema:i,data:c,errsCount:d,it:l}=e;if(!d)throw new Error("ajv implementation error");const{allErrors:u,opts:h}=l;if(l.props=!0,"all"!==h.removeAdditional&&n.alwaysValidSchema(l,r))return;const p=s.allSchemaProperties(i.properties),f=s.allSchemaProperties(i.patternProperties);function m(e){t.code(a._`delete ${c}[${e}]`)}function y(s){if("all"===h.removeAdditional||h.removeAdditional&&!1===r)m(s);else{if(!1===r)return e.setParams({additionalProperty:s}),e.error(),void(u||t.break());if("object"==typeof r&&!n.alwaysValidSchema(l,r)){const r=t.name("valid");"failing"===h.removeAdditional?(g(s,r,!1),t.if(a.not(r),(()=>{e.reset(),m(s)}))):(g(s,r),u||t.if(a.not(r),(()=>t.break())))}}}function g(t,r,s){const a={keyword:"additionalProperties",dataProp:t,dataPropType:n.Type.Str};!1===s&&Object.assign(a,{compositeRule:!0,createErrors:!1,allErrors:!1}),e.subschema(a,r)}t.forIn("key",c,(r=>{p.length||f.length?t.if(function(r){let o;if(p.length>8){const e=n.schemaRefOrVal(l,i.properties,"properties");o=s.isOwnProperty(t,e,r)}else o=p.length?a.or(...p.map((e=>a._`${r} === ${e}`))):a.nil;return f.length&&(o=a.or(o,...f.map((t=>a._`${s.usePattern(e,t)}.test(${r})`)))),a.not(o)}(r),(()=>y(r))):y(r)})),e.ok(a._`${d} === ${o.default.errors}`)}};t.default=i},1125:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(6776),a={keyword:"allOf",schemaType:"array",code(e){const{gen:t,schema:r,it:a}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");const o=t.name("valid");r.forEach(((t,r)=>{if(s.alwaysValidSchema(a,t))return;const n=e.subschema({keyword:"allOf",schemaProp:r},o);e.ok(o),e.mergeEvaluated(n)}))}};t.default=a},19:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:r(412).validateUnion,error:{message:"must match a schema in anyOf"}};t.default=s},9864:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(6776),o={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:{message:({params:{min:e,max:t}})=>void 0===t?s.str`must contain at least ${e} valid item(s)`:s.str`must contain at least ${e} and no more than ${t} valid item(s)`,params:({params:{min:e,max:t}})=>void 0===t?s._`{minContains: ${e}}`:s._`{minContains: ${e}, maxContains: ${t}}`},code(e){const{gen:t,schema:r,parentSchema:o,data:n,it:i}=e;let c,d;const{minContains:l,maxContains:u}=o;i.opts.next?(c=void 0===l?1:l,d=u):c=1;const h=t.const("len",s._`${n}.length`);if(e.setParams({min:c,max:d}),void 0===d&&0===c)return void a.checkStrictMode(i,'"minContains" == 0 without "maxContains": "contains" keyword ignored');if(void 0!==d&&c>d)return a.checkStrictMode(i,'"minContains" > "maxContains" is always invalid'),void e.fail();if(a.alwaysValidSchema(i,r)){let t=s._`${h} >= ${c}`;return void 0!==d&&(t=s._`${t} && ${h} <= ${d}`),void e.pass(t)}i.items=!0;const p=t.name("valid");if(void 0===d&&1===c)f(p,(()=>t.if(p,(()=>t.break()))));else{t.let(p,!1);const e=t.name("_valid"),r=t.let("count",0);f(e,(()=>t.if(e,(()=>function(e){t.code(s._`${e}++`),void 0===d?t.if(s._`${e} >= ${c}`,(()=>t.assign(p,!0).break())):(t.if(s._`${e} > ${d}`,(()=>t.assign(p,!1).break())),1===c?t.assign(p,!0):t.if(s._`${e} >= ${c}`,(()=>t.assign(p,!0))))}(r)))))}function f(r,s){t.forRange("i",0,h,(t=>{e.subschema({keyword:"contains",dataProp:t,dataPropType:a.Type.Num,compositeRule:!0},r),s()}))}e.result(p,(()=>e.reset()))}};t.default=o},7772:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateSchemaDeps=t.validatePropertyDeps=t.error=void 0;const s=r(3487),a=r(6776),o=r(412);t.error={message:({params:{property:e,depsCount:t,deps:r}})=>{const a=1===t?"property":"properties";return s.str`must have ${a} ${r} when property ${e} is present`},params:({params:{property:e,depsCount:t,deps:r,missingProperty:a}})=>s._`{property: ${e},
    missingProperty: ${a},
    depsCount: ${t},
    deps: ${r}}`};const n={keyword:"dependencies",type:"object",schemaType:"object",error:t.error,code(e){const[t,r]=function({schema:e}){const t={},r={};for(const s in e)"__proto__"!==s&&((Array.isArray(e[s])?t:r)[s]=e[s]);return[t,r]}(e);i(e,t),c(e,r)}};function i(e,t=e.schema){const{gen:r,data:a,it:n}=e;if(0===Object.keys(t).length)return;const i=r.let("missing");for(const c in t){const d=t[c];if(0===d.length)continue;const l=o.propertyInData(r,a,c,n.opts.ownProperties);e.setParams({property:c,depsCount:d.length,deps:d.join(", ")}),n.allErrors?r.if(l,(()=>{for(const t of d)o.checkReportMissingProp(e,t)})):(r.if(s._`${l} && (${o.checkMissingProp(e,d,i)})`),o.reportMissingProp(e,i),r.else())}}function c(e,t=e.schema){const{gen:r,data:s,keyword:n,it:i}=e,c=r.name("valid");for(const d in t)a.alwaysValidSchema(i,t[d])||(r.if(o.propertyInData(r,s,d,i.opts.ownProperties),(()=>{const t=e.subschema({keyword:n,schemaProp:d},c);e.mergeValidEvaluated(t,c)}),(()=>r.var(c,!0))),e.ok(c))}t.validatePropertyDeps=i,t.validateSchemaDeps=c,t.default=n},9434:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(6776),o={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:{message:({params:e})=>s.str`must match "${e.ifClause}" schema`,params:({params:e})=>s._`{failingKeyword: ${e.ifClause}}`},code(e){const{gen:t,parentSchema:r,it:o}=e;void 0===r.then&&void 0===r.else&&a.checkStrictMode(o,'"if" without "then" and "else" is ignored');const i=n(o,"then"),c=n(o,"else");if(!i&&!c)return;const d=t.let("valid",!0),l=t.name("_valid");if(function(){const t=e.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},l);e.mergeEvaluated(t)}(),e.reset(),i&&c){const r=t.let("ifClause");e.setParams({ifClause:r}),t.if(l,u("then",r),u("else",r))}else i?t.if(l,u("then")):t.if(s.not(l),u("else"));function u(r,a){return()=>{const o=e.subschema({keyword:r},l);t.assign(d,l),e.mergeValidEvaluated(o,d),a?t.assign(a,s._`${r}`):e.setParams({ifClause:r})}}e.pass(d,(()=>e.error(!0)))}};function n(e,t){const r=e.schema[t];return void 0!==r&&!a.alwaysValidSchema(e,r)}t.default=o},8200:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(4783),a=r(2924),o=r(4665),n=r(1119),i=r(9864),c=r(7772),d=r(3708),l=r(9351),u=r(6239),h=r(2296),p=r(5697),f=r(19),m=r(4200),y=r(1125),g=r(9434),v=r(6552);t.default=function(e=!1){const t=[p.default,f.default,m.default,y.default,g.default,v.default,d.default,l.default,c.default,u.default,h.default];return e?t.push(a.default,n.default):t.push(s.default,o.default),t.push(i.default),t}},4665:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateTuple=void 0;const s=r(3487),a=r(6776),o=r(412),n={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(e){const{schema:t,it:r}=e;if(Array.isArray(t))return i(e,"additionalItems",t);r.items=!0,a.alwaysValidSchema(r,t)||e.ok(o.validateArray(e))}};function i(e,t,r=e.schema){const{gen:o,parentSchema:n,data:i,keyword:c,it:d}=e;!function(e){const{opts:s,errSchemaPath:o}=d,n=r.length,i=n===e.minItems&&(n===e.maxItems||!1===e[t]);if(s.strictTuples&&!i){const e=`"${c}" is ${n}-tuple, but minItems or maxItems/${t} are not specified or different at path "${o}"`;a.checkStrictMode(d,e,s.strictTuples)}}(n),d.opts.unevaluated&&r.length&&!0!==d.items&&(d.items=a.mergeEvaluated.items(o,r.length,d.items));const l=o.name("valid"),u=o.const("len",s._`${i}.length`);r.forEach(((t,r)=>{a.alwaysValidSchema(d,t)||(o.if(s._`${u} > ${r}`,(()=>e.subschema({keyword:c,schemaProp:r,dataProp:r},l))),e.ok(l))}))}t.validateTuple=i,t.default=n},1119:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(6776),o=r(412),n=r(4783),i={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:{message:({params:{len:e}})=>s.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>s._`{limit: ${e}}`},code(e){const{schema:t,parentSchema:r,it:s}=e,{prefixItems:i}=r;s.items=!0,a.alwaysValidSchema(s,t)||(i?n.validateAdditionalItems(e,i):e.ok(o.validateArray(e)))}};t.default=i},5697:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(6776),a={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(e){const{gen:t,schema:r,it:a}=e;if(s.alwaysValidSchema(a,r))return void e.fail();const o=t.name("valid");e.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},o),e.result(o,(()=>e.error()),(()=>e.reset()))},error:{message:"must NOT be valid"}};t.default=a},4200:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(6776),o={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:{message:"must match exactly one schema in oneOf",params:({params:e})=>s._`{passingSchemas: ${e.passing}}`},code(e){const{gen:t,schema:r,parentSchema:o,it:n}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(n.opts.discriminator&&o.discriminator)return;const i=r,c=t.let("valid",!1),d=t.let("passing",null),l=t.name("_valid");e.setParams({passing:d}),t.block((function(){i.forEach(((r,o)=>{let i;a.alwaysValidSchema(n,r)?t.var(l,!0):i=e.subschema({keyword:"oneOf",schemaProp:o,compositeRule:!0},l),o>0&&t.if(s._`${l} && ${c}`).assign(c,!1).assign(d,s._`[${d}, ${o}]`).else(),t.if(l,(()=>{t.assign(c,!0),t.assign(d,o),i&&e.mergeEvaluated(i,s.Name)}))}))})),e.result(c,(()=>e.reset()),(()=>e.error(!0)))}};t.default=o},2296:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(412),a=r(3487),o=r(6776),n=r(6776),i={keyword:"patternProperties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,data:i,parentSchema:c,it:d}=e,{opts:l}=d,u=s.allSchemaProperties(r),h=u.filter((e=>o.alwaysValidSchema(d,r[e])));if(0===u.length||h.length===u.length&&(!d.opts.unevaluated||!0===d.props))return;const p=l.strictSchema&&!l.allowMatchingProperties&&c.properties,f=t.name("valid");!0===d.props||d.props instanceof a.Name||(d.props=n.evaluatedPropsToName(t,d.props));const{props:m}=d;function y(e){for(const t in p)new RegExp(e).test(t)&&o.checkStrictMode(d,`property ${t} matches pattern ${e} (use allowMatchingProperties)`)}function g(r){t.forIn("key",i,(o=>{t.if(a._`${s.usePattern(e,r)}.test(${o})`,(()=>{const s=h.includes(r);s||e.subschema({keyword:"patternProperties",schemaProp:r,dataProp:o,dataPropType:n.Type.Str},f),d.opts.unevaluated&&!0!==m?t.assign(a._`${m}[${o}]`,!0):s||d.allErrors||t.if(a.not(f),(()=>t.break()))}))}))}!function(){for(const e of u)p&&y(e),d.allErrors?g(e):(t.var(f,!0),g(e),t.if(f))}()}};t.default=i},2924:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(4665),a={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code:e=>s.validateTuple(e,"items")};t.default=a},6239:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(4815),a=r(412),o=r(6776),n=r(9351),i={keyword:"properties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,parentSchema:i,data:c,it:d}=e;"all"===d.opts.removeAdditional&&void 0===i.additionalProperties&&n.default.code(new s.KeywordCxt(d,n.default,"additionalProperties"));const l=a.allSchemaProperties(r);for(const e of l)d.definedProperties.add(e);d.opts.unevaluated&&l.length&&!0!==d.props&&(d.props=o.mergeEvaluated.props(t,o.toHash(l),d.props));const u=l.filter((e=>!o.alwaysValidSchema(d,r[e])));if(0===u.length)return;const h=t.name("valid");for(const r of u)p(r)?f(r):(t.if(a.propertyInData(t,c,r,d.opts.ownProperties)),f(r),d.allErrors||t.else().var(h,!0),t.endIf()),e.it.definedProperties.add(r),e.ok(h);function p(e){return d.opts.useDefaults&&!d.compositeRule&&void 0!==r[e].default}function f(t){e.subschema({keyword:"properties",schemaProp:t,dataProp:t},h)}}};t.default=i},3708:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(6776),o={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:{message:"property name must be valid",params:({params:e})=>s._`{propertyName: ${e.propertyName}}`},code(e){const{gen:t,schema:r,data:o,it:n}=e;if(a.alwaysValidSchema(n,r))return;const i=t.name("valid");t.forIn("key",o,(r=>{e.setParams({propertyName:r}),e.subschema({keyword:"propertyNames",data:r,dataTypes:["string"],propertyName:r,compositeRule:!0},i),t.if(s.not(i),(()=>{e.error(!0),n.allErrors||t.break()}))})),e.ok(i)}};t.default=o},6552:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(6776),a={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:e,parentSchema:t,it:r}){void 0===t.if&&s.checkStrictMode(r,`"${e}" without "if" is ignored`)}};t.default=a},412:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateUnion=t.validateArray=t.usePattern=t.callValidateCode=t.schemaProperties=t.allSchemaProperties=t.noPropertyInData=t.propertyInData=t.isOwnProperty=t.hasPropFunc=t.reportMissingProp=t.checkMissingProp=t.checkReportMissingProp=void 0;const s=r(3487),a=r(6776),o=r(2141);function n(e){return e.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:s._`Object.prototype.hasOwnProperty`})}function i(e,t,r){return s._`${n(e)}.call(${t}, ${r})`}function c(e,t,r,a){const o=s._`${t}${s.getProperty(r)} === undefined`;return a?s.or(o,s.not(i(e,t,r))):o}function d(e){return e?Object.keys(e).filter((e=>"__proto__"!==e)):[]}t.checkReportMissingProp=function(e,t){const{gen:r,data:a,it:o}=e;r.if(c(r,a,t,o.opts.ownProperties),(()=>{e.setParams({missingProperty:s._`${t}`},!0),e.error()}))},t.checkMissingProp=function({gen:e,data:t,it:{opts:r}},a,o){return s.or(...a.map((a=>s.and(c(e,t,a,r.ownProperties),s._`${o} = ${a}`))))},t.reportMissingProp=function(e,t){e.setParams({missingProperty:t},!0),e.error()},t.hasPropFunc=n,t.isOwnProperty=i,t.propertyInData=function(e,t,r,a){const o=s._`${t}${s.getProperty(r)} !== undefined`;return a?s._`${o} && ${i(e,t,r)}`:o},t.noPropertyInData=c,t.allSchemaProperties=d,t.schemaProperties=function(e,t){return d(t).filter((r=>!a.alwaysValidSchema(e,t[r])))},t.callValidateCode=function({schemaCode:e,data:t,it:{gen:r,topSchemaRef:a,schemaPath:n,errorPath:i},it:c},d,l,u){const h=u?s._`${e}, ${t}, ${a}${n}`:t,p=[[o.default.instancePath,s.strConcat(o.default.instancePath,i)],[o.default.parentData,c.parentData],[o.default.parentDataProperty,c.parentDataProperty],[o.default.rootData,o.default.rootData]];c.opts.dynamicRef&&p.push([o.default.dynamicAnchors,o.default.dynamicAnchors]);const f=s._`${h}, ${r.object(...p)}`;return l!==s.nil?s._`${d}.call(${l}, ${f})`:s._`${d}(${f})`},t.usePattern=function({gen:e,it:{opts:t}},r){const a=t.unicodeRegExp?"u":"";return e.scopeValue("pattern",{key:r,ref:new RegExp(r,a),code:s._`new RegExp(${r}, ${a})`})},t.validateArray=function(e){const{gen:t,data:r,keyword:o,it:n}=e,i=t.name("valid");if(n.allErrors){const e=t.let("valid",!0);return c((()=>t.assign(e,!1))),e}return t.var(i,!0),c((()=>t.break())),i;function c(n){const c=t.const("len",s._`${r}.length`);t.forRange("i",0,c,(r=>{e.subschema({keyword:o,dataProp:r,dataPropType:a.Type.Num},i),t.if(s.not(i),n)}))}},t.validateUnion=function(e){const{gen:t,schema:r,keyword:o,it:n}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(r.some((e=>a.alwaysValidSchema(n,e)))&&!n.opts.unevaluated)return;const i=t.let("valid",!1),c=t.name("_valid");t.block((()=>r.forEach(((r,a)=>{const n=e.subschema({keyword:o,schemaProp:a,compositeRule:!0},c);t.assign(i,s._`${i} || ${c}`),e.mergeValidEvaluated(n,c)||t.if(s.not(i))})))),e.result(i,(()=>e.reset()),(()=>e.error(!0)))}},8386:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}};t.default=r},5684:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(8386),a=r(8280),o=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",s.default,a.default];t.default=o},8280:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.callRef=t.getValidate=void 0;const s=r(6646),a=r(412),o=r(3487),n=r(2141),i=r(5173),c=r(6776),d={keyword:"$ref",schemaType:"string",code(e){const{gen:t,schema:r,it:a}=e,{baseId:n,schemaEnv:c,validateName:d,opts:h,self:p}=a,{root:f}=c;if(("#"===r||"#/"===r)&&n===f.baseId)return function(){if(c===f)return u(e,d,c,c.$async);const r=t.scopeValue("root",{ref:f});return u(e,o._`${r}.validate`,f,f.$async)}();const m=i.resolveRef.call(p,f,n,r);if(void 0===m)throw new s.default(n,r);return m instanceof i.SchemaEnv?function(t){const r=l(e,t);u(e,r,t,t.$async)}(m):function(s){const a=t.scopeValue("schema",!0===h.code.source?{ref:s,code:o.stringify(s)}:{ref:s}),n=t.name("valid"),i=e.subschema({schema:s,dataTypes:[],schemaPath:o.nil,topSchemaRef:a,errSchemaPath:r},n);e.mergeEvaluated(i),e.ok(n)}(m)}};function l(e,t){const{gen:r}=e;return t.validate?r.scopeValue("validate",{ref:t.validate}):o._`${r.scopeValue("wrapper",{ref:t})}.validate`}function u(e,t,r,s){const{gen:i,it:d}=e,{allErrors:l,schemaEnv:u,opts:h}=d,p=h.passContext?n.default.this:o.nil;function f(e){const t=o._`${e}.errors`;i.assign(n.default.vErrors,o._`${n.default.vErrors} === null ? ${t} : ${n.default.vErrors}.concat(${t})`),i.assign(n.default.errors,o._`${n.default.vErrors}.length`)}function m(e){var t;if(!d.opts.unevaluated)return;const s=null===(t=null==r?void 0:r.validate)||void 0===t?void 0:t.evaluated;if(!0!==d.props)if(s&&!s.dynamicProps)void 0!==s.props&&(d.props=c.mergeEvaluated.props(i,s.props,d.props));else{const t=i.var("props",o._`${e}.evaluated.props`);d.props=c.mergeEvaluated.props(i,t,d.props,o.Name)}if(!0!==d.items)if(s&&!s.dynamicItems)void 0!==s.items&&(d.items=c.mergeEvaluated.items(i,s.items,d.items));else{const t=i.var("items",o._`${e}.evaluated.items`);d.items=c.mergeEvaluated.items(i,t,d.items,o.Name)}}s?function(){if(!u.$async)throw new Error("async schema referenced by sync schema");const r=i.let("valid");i.try((()=>{i.code(o._`await ${a.callValidateCode(e,t,p)}`),m(t),l||i.assign(r,!0)}),(e=>{i.if(o._`!(${e} instanceof ${d.ValidationError})`,(()=>i.throw(e))),f(e),l||i.assign(r,!1)})),e.ok(r)}():e.result(a.callValidateCode(e,t,p),(()=>m(t)),(()=>f(t)))}t.getValidate=l,t.callRef=u,t.default=d},1240:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(9306),o={keyword:"discriminator",type:"object",schemaType:"object",error:{message:({params:{discrError:e,tagName:t}})=>e===a.DiscrError.Tag?`tag "${t}" must be string`:`value of tag "${t}" must be in oneOf`,params:({params:{discrError:e,tag:t,tagName:r}})=>s._`{error: ${e}, tag: ${r}, tagValue: ${t}}`},code(e){const{gen:t,data:r,schema:o,parentSchema:n,it:i}=e,{oneOf:c}=n;if(!i.opts.discriminator)throw new Error("discriminator: requires discriminator option");const d=o.propertyName;if("string"!=typeof d)throw new Error("discriminator: requires propertyName");if(o.mapping)throw new Error("discriminator: mapping is not supported");if(!c)throw new Error("discriminator: requires oneOf keyword");const l=t.let("valid",!1),u=t.const("tag",s._`${r}${s.getProperty(d)}`);function h(r){const a=t.name("valid"),o=e.subschema({keyword:"oneOf",schemaProp:r},a);return e.mergeEvaluated(o,s.Name),a}t.if(s._`typeof ${u} == "string"`,(()=>function(){const r=function(){var e;const t={},r=a(n);let s=!0;for(let t=0;t<c.length;t++){const n=c[t],i=null===(e=n.properties)||void 0===e?void 0:e[d];if("object"!=typeof i)throw new Error(`discriminator: oneOf schemas must have "properties/${d}"`);s=s&&(r||a(n)),o(i,t)}if(!s)throw new Error(`discriminator: "${d}" must be required`);return t;function a({required:e}){return Array.isArray(e)&&e.includes(d)}function o(e,t){if(e.const)i(e.const,t);else{if(!e.enum)throw new Error(`discriminator: "properties/${d}" must have "const" or "enum"`);for(const r of e.enum)i(r,t)}}function i(e,r){if("string"!=typeof e||e in t)throw new Error(`discriminator: "${d}" values must be unique strings`);t[e]=r}}();t.if(!1);for(const e in r)t.elseIf(s._`${u} === ${e}`),t.assign(l,h(r[e]));t.else(),e.error(!1,{discrError:a.DiscrError.Mapping,tag:u,tagName:d}),t.endIf()}()),(()=>e.error(!1,{discrError:a.DiscrError.Tag,tag:u,tagName:d}))),e.ok(l)}};t.default=o},9306:(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DiscrError=void 0,(r=t.DiscrError||(t.DiscrError={})).Tag="tag",r.Mapping="mapping"},3924:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(5684),a=r(2649),o=r(8200),n=r(9502),i=r(6167),c=[s.default,a.default,o.default(),n.default,i.metadataVocabulary,i.contentVocabulary];t.default=c},9651:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>s.str`must match format "${e}"`,params:({schemaCode:e})=>s._`{format: ${e}}`},code(e,t){const{gen:r,data:a,$data:o,schema:n,schemaCode:i,it:c}=e,{opts:d,errSchemaPath:l,schemaEnv:u,self:h}=c;d.validateFormats&&(o?function(){const o=r.scopeValue("formats",{ref:h.formats,code:d.code.formats}),n=r.const("fDef",s._`${o}[${i}]`),c=r.let("fType"),l=r.let("format");r.if(s._`typeof ${n} == "object" && !(${n} instanceof RegExp)`,(()=>r.assign(c,s._`${n}.type || "string"`).assign(l,s._`${n}.validate`)),(()=>r.assign(c,s._`"string"`).assign(l,n))),e.fail$data(s.or(!1===d.strictSchema?s.nil:s._`${i} && !${l}`,function(){const e=u.$async?s._`(${n}.async ? await ${l}(${a}) : ${l}(${a}))`:s._`${l}(${a})`,r=s._`(typeof ${l} == "function" ? ${e} : ${l}.test(${a}))`;return s._`${l} && ${l} !== true && ${c} === ${t} && !${r}`}()))}():function(){const o=h.formats[n];if(!o)return void function(){if(!1!==d.strictSchema)throw new Error(e());function e(){return`unknown format "${n}" ignored in schema at path "${l}"`}h.logger.warn(e())}();if(!0===o)return;const[i,c,p]=function(e){const t=e instanceof RegExp?s.regexpCode(e):d.code.formats?s._`${d.code.formats}${s.getProperty(n)}`:void 0,a=r.scopeValue("formats",{key:n,ref:e,code:t});return"object"!=typeof e||e instanceof RegExp?["string",e,a]:[e.type||"string",e.validate,s._`${a}.validate`]}(o);i===t&&e.pass(function(){if("object"==typeof o&&!(o instanceof RegExp)&&o.async){if(!u.$async)throw new Error("async format in sync schema");return s._`await ${p}(${a})`}return"function"==typeof c?s._`${p}(${a})`:s._`${p}.test(${a})`}())}())}};t.default=a},9502:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=[r(9651).default];t.default=s},6167:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contentVocabulary=t.metadataVocabulary=void 0,t.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"],t.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"]},4693:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(6776),o=r(3510),n={keyword:"const",$data:!0,error:{message:"must be equal to constant",params:({schemaCode:e})=>s._`{allowedValue: ${e}}`},code(e){const{gen:t,data:r,$data:n,schemaCode:i,schema:c}=e;n||c&&"object"==typeof c?e.fail$data(s._`!${a.useFunc(t,o.default)}(${r}, ${i})`):e.fail(s._`${c} !== ${r}`)}};t.default=n},966:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(6776),o=r(3510),n={keyword:"enum",schemaType:"array",$data:!0,error:{message:"must be equal to one of the allowed values",params:({schemaCode:e})=>s._`{allowedValues: ${e}}`},code(e){const{gen:t,data:r,$data:n,schema:i,schemaCode:c,it:d}=e;if(!n&&0===i.length)throw new Error("enum must have non-empty array");const l=i.length>=d.opts.loopEnum,u=a.useFunc(t,o.default);let h;if(l||n)h=t.let("valid"),e.block$data(h,(function(){t.assign(h,!1),t.forOf("v",c,(e=>t.if(s._`${u}(${r}, ${e})`,(()=>t.assign(h,!0).break()))))}));else{if(!Array.isArray(i))throw new Error("ajv implementation error");const e=t.const("vSchema",c);h=s.or(...i.map(((t,a)=>function(e,t){const a=i[t];return"object"==typeof a&&null!==a?s._`${u}(${r}, ${e}[${t}])`:s._`${r} === ${a}`}(e,a))))}e.pass(h)}};t.default=n},2649:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3983),a=r(430),o=r(3229),n=r(4336),i=r(498),c=r(3301),d=r(1687),l=r(2958),u=r(4693),h=r(966),p=[s.default,a.default,o.default,n.default,i.default,c.default,d.default,l.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},u.default,h.default];t.default=p},1687:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){const r="maxItems"===e?"more":"fewer";return s.str`must NOT have ${r} than ${t} items`},params:({schemaCode:e})=>s._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:a}=e,o="maxItems"===t?s.operators.GT:s.operators.LT;e.fail$data(s._`${r}.length ${o} ${a}`)}};t.default=a},3229:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=r(6776),o=r(4499),n={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){const r="maxLength"===e?"more":"fewer";return s.str`must NOT have ${r} than ${t} characters`},params:({schemaCode:e})=>s._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n,it:i}=e,c="maxLength"===t?s.operators.GT:s.operators.LT,d=!1===i.opts.unicode?s._`${r}.length`:s._`${a.useFunc(e.gen,o.default)}(${r})`;e.fail$data(s._`${d} ${c} ${n}`)}};t.default=n},3983:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a=s.operators,o={maximum:{okStr:"<=",ok:a.LTE,fail:a.GT},minimum:{okStr:">=",ok:a.GTE,fail:a.LT},exclusiveMaximum:{okStr:"<",ok:a.LT,fail:a.GTE},exclusiveMinimum:{okStr:">",ok:a.GT,fail:a.LTE}},n={message:({keyword:e,schemaCode:t})=>s.str`must be ${o[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>s._`{comparison: ${o[e].okStr}, limit: ${t}}`},i={keyword:Object.keys(o),type:"number",schemaType:"number",$data:!0,error:n,code(e){const{keyword:t,data:r,schemaCode:a}=e;e.fail$data(s._`${r} ${o[t].fail} ${a} || isNaN(${r})`)}};t.default=i},498:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){const r="maxProperties"===e?"more":"fewer";return s.str`must NOT have ${r} than ${t} items`},params:({schemaCode:e})=>s._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:a}=e,o="maxProperties"===t?s.operators.GT:s.operators.LT;e.fail$data(s._`Object.keys(${r}).length ${o} ${a}`)}};t.default=a},430:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3487),a={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:{message:({schemaCode:e})=>s.str`must be multiple of ${e}`,params:({schemaCode:e})=>s._`{multipleOf: ${e}}`},code(e){const{gen:t,data:r,schemaCode:a,it:o}=e,n=o.opts.multipleOfPrecision,i=t.let("res"),c=n?s._`Math.abs(Math.round(${i}) - ${i}) > 1e-${n}`:s._`${i} !== parseInt(${i})`;e.fail$data(s._`(${a} === 0 || (${i} = ${r}/${a}, ${c}))`)}};t.default=a},4336:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(412),a=r(3487),o={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>a.str`must match pattern "${e}"`,params:({schemaCode:e})=>a._`{pattern: ${e}}`},code(e){const{data:t,$data:r,schema:o,schemaCode:n,it:i}=e,c=i.opts.unicodeRegExp?"u":"",d=r?a._`(new RegExp(${n}, ${c}))`:s.usePattern(e,o);e.fail$data(a._`!${d}.test(${t})`)}};t.default=o},3301:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(412),a=r(3487),o=r(6776),n={keyword:"required",type:"object",schemaType:"array",$data:!0,error:{message:({params:{missingProperty:e}})=>a.str`must have required property '${e}'`,params:({params:{missingProperty:e}})=>a._`{missingProperty: ${e}}`},code(e){const{gen:t,schema:r,schemaCode:n,data:i,$data:c,it:d}=e,{opts:l}=d;if(!c&&0===r.length)return;const u=r.length>=l.loopRequired;if(d.allErrors?function(){if(u||c)e.block$data(a.nil,h);else for(const t of r)s.checkReportMissingProp(e,t)}():function(){const o=t.let("missing");if(u||c){const r=t.let("valid",!0);e.block$data(r,(()=>function(r,o){e.setParams({missingProperty:r}),t.forOf(r,n,(()=>{t.assign(o,s.propertyInData(t,i,r,l.ownProperties)),t.if(a.not(o),(()=>{e.error(),t.break()}))}),a.nil)}(o,r))),e.ok(r)}else t.if(s.checkMissingProp(e,r,o)),s.reportMissingProp(e,o),t.else()}(),l.strictRequired){const t=e.parentSchema.properties,{definedProperties:s}=e.it;for(const e of r)if(void 0===(null==t?void 0:t[e])&&!s.has(e)){const t=`required property "${e}" is not defined at "${d.schemaEnv.baseId+d.errSchemaPath}" (strictRequired)`;o.checkStrictMode(d,t,d.opts.strictRequired)}}function h(){t.forOf("prop",n,(r=>{e.setParams({missingProperty:r}),t.if(s.noPropertyInData(t,i,r,l.ownProperties),(()=>e.error()))}))}}};t.default=n},2958:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(453),a=r(3487),o=r(6776),n=r(3510),i={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:{message:({params:{i:e,j:t}})=>a.str`must NOT have duplicate items (items ## ${t} and ${e} are identical)`,params:({params:{i:e,j:t}})=>a._`{i: ${e}, j: ${t}}`},code(e){const{gen:t,data:r,$data:i,schema:c,parentSchema:d,schemaCode:l,it:u}=e;if(!i&&!c)return;const h=t.let("valid"),p=d.items?s.getSchemaTypes(d.items):[];function f(o,n){const i=t.name("item"),c=s.checkDataTypes(p,i,u.opts.strictNumbers,s.DataType.Wrong),d=t.const("indices",a._`{}`);t.for(a._`;${o}--;`,(()=>{t.let(i,a._`${r}[${o}]`),t.if(c,a._`continue`),p.length>1&&t.if(a._`typeof ${i} == "string"`,a._`${i} += "_"`),t.if(a._`typeof ${d}[${i}] == "number"`,(()=>{t.assign(n,a._`${d}[${i}]`),e.error(),t.assign(h,!1).break()})).code(a._`${d}[${i}] = ${o}`)}))}function m(s,i){const c=o.useFunc(t,n.default),d=t.name("outer");t.label(d).for(a._`;${s}--;`,(()=>t.for(a._`${i} = ${s}; ${i}--;`,(()=>t.if(a._`${c}(${r}[${s}], ${r}[${i}])`,(()=>{e.error(),t.assign(h,!1).break(d)}))))))}e.block$data(h,(function(){const s=t.let("i",a._`${r}.length`),o=t.let("j");e.setParams({i:s,j:o}),t.assign(h,!0),t.if(a._`${s} > 1`,(()=>(p.length>0&&!p.some((e=>"object"===e||"array"===e))?f:m)(s,o)))}),a._`${l} === false`),e.ok(h)}};t.default=i},4063:e=>{"use strict";e.exports=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var s,a,o;if(Array.isArray(t)){if((s=t.length)!=r.length)return!1;for(a=s;0!=a--;)if(!e(t[a],r[a]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((s=(o=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(a=s;0!=a--;)if(!Object.prototype.hasOwnProperty.call(r,o[a]))return!1;for(a=s;0!=a--;){var n=o[a];if(!e(t[n],r[n]))return!1}return!0}return t!=t&&r!=r}},9461:e=>{"use strict";var t=e.exports=function(e,t,s){"function"==typeof t&&(s=t,t={}),r(t,"function"==typeof(s=t.cb||s)?s:s.pre||function(){},s.post||function(){},e,"",e)};function r(e,s,a,o,n,i,c,d,l,u){if(o&&"object"==typeof o&&!Array.isArray(o)){for(var h in s(o,n,i,c,d,l,u),o){var p=o[h];if(Array.isArray(p)){if(h in t.arrayKeywords)for(var f=0;f<p.length;f++)r(e,s,a,p[f],n+"/"+h+"/"+f,i,n,h,o,f)}else if(h in t.propsKeywords){if(p&&"object"==typeof p)for(var m in p)r(e,s,a,p[m],n+"/"+h+"/"+m.replace(/~/g,"~0").replace(/\//g,"~1"),i,n,h,o,m)}else(h in t.keywords||e.allKeys&&!(h in t.skipKeywords))&&r(e,s,a,p,n+"/"+h,i,n,h,o)}a(o,n,i,c,d,l,u)}}t.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},t.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},t.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},t.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}},1076:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3044),a=r(269);class o{constructor(e={}){this.defaultOptions={margin:10,padding:4,font:"10pt Lucida Console, monospace",lineHeight:12,foregroundColour:"#fff",backgroundColour:"#3338",defaultValue:{align:"left",showLabel:!0},defaultMarker:{showLabel:!0,showValue:!0,showMarker:!0,markerSize:6,markerStyle:"x",markerColour:"#ccc",space:"world",labelOffset:s.vec(10)}},this.options=Object.assign({},this.defaultOptions,e),this.values=new Map,this.markers=new Map}static initialise(e={}){o.instance=new o(e)}static getInstance(){return null==o.instance&&o.initialise(),o.instance}static value(e,t,r={}){const s=o.getInstance();s.values.set(e,Object.assign({label:e,value:t},s.defaultOptions.defaultValue,r))}static marker(e,t,r,s={}){const a=o.getInstance();a.markers.set(e,Object.assign({label:e,value:t,position:r},a.defaultOptions.defaultMarker,s))}static draw(e){const t=o.getInstance();let r;e.save(),e.scale(1/a.scaleFactor,1/a.scaleFactor),t.markers.forEach((r=>{"world"===r.space&&t.drawMarker(e,r)})),e.restore(),e.save(),e.setTransform(1,0,0,1,0,0);let n=t.options.margin,i=t.options.margin;const c=t.options.lineHeight+2*t.options.padding;t.values.forEach((a=>{var o,d,l,u;switch(a.align){case"left":r=s.vec(t.options.margin,n),n+=c;break;case"right":r=s.vec(e.canvas.clientWidth-t.options.margin,i),i+=c}t.drawLabel(e,(a.showLabel?a.label+": ":"")+a.value,r,a.align,null!==(o=a.padding)&&void 0!==o?o:t.options.padding,null!==(d=a.font)&&void 0!==d?d:t.options.font,null!==(l=a.foregroundColour)&&void 0!==l?l:t.options.foregroundColour,null!==(u=a.backgroundColour)&&void 0!==u?u:t.options.backgroundColour)})),t.markers.forEach((r=>{"screen"===r.space&&t.drawMarker(e,r)})),e.restore(),t.values.clear(),t.markers.clear()}drawMarker(e,t){var r,o,n,i,c;e.save();const d=s.vec.mul(null!==(r=t.position)&&void 0!==r?r:s.vec(),a.scaleFactor);if((t.showLabel||t.showValue)&&this.drawLabel(e,(t.showLabel?t.label+": ":"")+(t.showValue?""+t.value:""),s.vec.add(null!=d?d:s.vec(),t.labelOffset),"left",null!==(o=t.padding)&&void 0!==o?o:this.options.padding,null!==(n=t.font)&&void 0!==n?n:this.options.font,null!==(i=t.foregroundColour)&&void 0!==i?i:this.options.foregroundColour,null!==(c=t.backgroundColour)&&void 0!==c?c:this.options.backgroundColour),t.showMarker)switch(e.lineWidth=2,e.strokeStyle=e.fillStyle=t.markerColour,t.markerStyle){case"x":this.drawCross(e,d,t.markerSize);break;case"+":this.drawPlus(e,d,t.markerSize);break;case".":this.drawDot(e,d,t.markerSize)}e.restore()}drawLabel(e,t,r,s,a,o,n,i){e.save(),e.font=o,e.textBaseline="top";const c={width:e.measureText(t).width+2*a,height:this.options.lineHeight+2*a},d="right"===s?r.x-c.width:r.x;e.fillStyle=i,e.fillRect(d-a,r.y-a,c.width,c.height),e.fillStyle=n,e.fillText(t,d,r.y),e.restore()}drawCross(e,t,r){e.beginPath();const s=r/2;e.moveTo(t.x-s,t.y-s),e.lineTo(t.x+s,t.y+s),e.moveTo(t.x-s,t.y+s),e.lineTo(t.x+s,t.y-s),e.stroke()}drawPlus(e,t,r){e.beginPath();const s=r/2;e.moveTo(t.x,t.y-s),e.lineTo(t.x,t.y+s),e.moveTo(t.x-s,t.y),e.lineTo(t.x+s,t.y),e.stroke()}drawDot(e,t,r){e.beginPath(),e.arc(t.x,t.y,r/2,0,2*Math.PI),e.fill()}}t.default=o},9221:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(269),a=r(5601),o=r(1076),n=r(670),i=r(7614),c=r(1663),d=r(2713),l=r(3044);t.default=class{constructor(e){if(this.frameRate=0,this.frameCount=0,null===e)throw new Error("A valid container element must be specified.");if("canvas"!==e.tagName.toLowerCase())throw new Error("Container element must be a canvas.");this.canvas=e;const t=this.canvas.getContext("2d");if(null===t)throw new Error("Couldn't get a 2d context.");this.context=t,window.addEventListener("resize",this.resize.bind(this),!1),this.resize()}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context.imageSmoothingEnabled=!1}initialise(){o.default.initialise(),n.default.initialise(),i.default.initialise(),c.default.initialise(),this.lastFrameTime=this.lastFrameCountTime=performance.now(),this.loop(),c.default.push(new d.LoadingState)}loop(){const e=performance.now(),t=Math.min(e-this.lastFrameTime,a.FPS_MIN);e-this.lastFrameCountTime>=1e3&&(this.lastFrameCountTime=e,this.frameRate=this.frameCount,this.frameCount=0),this.frameCount++,this.lastFrameTime=e,s.showFPS&&o.default.value("FPS",this.frameRate,{align:"right"}),this.update(t),this.draw(),window.requestAnimationFrame(this.loop.bind(this))}update(e){c.default.update(e),n.default.update()}draw(){const e=l.vec.mul(l.vec(this.canvas.width,this.canvas.height),1/s.scaleFactor);this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.setTransform(s.scaleFactor,0,0,s.scaleFactor,0,0),c.default.draw(this.context,e),o.default.draw(this.context)}}},670:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3044);class a{constructor(){this.keyboardState={},this.previousKeyboardState={},this.mouseState={button:!1,position:s.vec(),wheel:0},this.previousMouseState={button:!1,position:s.vec(),wheel:0},window.addEventListener("mousedown",(()=>{this.mouseState.button=!0})),window.addEventListener("mouseup",(()=>{this.mouseState.button=!1})),window.addEventListener("touchstart",(()=>{this.mouseState.button=!0})),window.addEventListener("touchend",(()=>{this.mouseState.button=!1})),window.addEventListener("mousemove",(e=>{this.mouseState.position.x=e.offsetX,this.mouseState.position.y=e.offsetY})),window.addEventListener("keydown",(e=>{this.keyboardState[e.code]=!0})),window.addEventListener("keyup",(e=>{this.keyboardState[e.code]=!1})),window.addEventListener("wheel",(e=>{this.mouseState.wheel=e.deltaY>0?1:-1}))}static initialise(){a.instance=new a}static getInstance(){if(void 0===a.instance)throw new Error("Input manager not properly initialised");return a.instance}static update(){const e=a.getInstance();e.previousKeyboardState=Object.assign({},e.keyboardState),e.previousMouseState={button:e.mouseState.button,position:s.vec.cpy(e.mouseState.position),wheel:0}}static keyDown(e){const t=a.getInstance();if(null==e){for(const e in t.keyboardState)if(t.keyboardState[e])return!0;return!1}return!!t.keyboardState[e]}static keyPressed(e){const t=a.getInstance();if(null==e){for(const e in t.keyboardState)if(t.keyboardState[e]&&(!(e in t.previousKeyboardState)||!t.previousKeyboardState[e]))return!0;return!1}return!!t.keyboardState[e]&&!t.previousKeyboardState[e]}static keyReleased(e){const t=a.getInstance();if(null==e){for(const e in t.keyboardState)if(!t.keyboardState[e]&&t.previousKeyboardState[e])return!0;return!1}return!t.keyboardState[e]&&!!t.previousKeyboardState[e]}static mouseDown(){return!!a.getInstance().mouseState.button}static mousePressed(){const e=a.getInstance();return!!e.mouseState.button&&!e.previousMouseState.button}static mouseReleased(){const e=a.getInstance();return!e.mouseState.button&&!!e.previousMouseState.button}static mouseWheelUp(){return a.getInstance().mouseState.wheel>0}static mouseWheelDown(){return a.getInstance().mouseState.wheel<0}static mousePosition(){return a.getInstance().mouseState.position}}t.default=a},5601:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FPS_MIN=t.SIMULATE_SLOW_LOADING=t.DEBUG=void 0,t.DEBUG=!0,t.SIMULATE_SLOW_LOADING=!1,t.FPS_MIN=1/30},7614:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(9005),a=r(5601),o=r(9578),n=r(7900),i=r(9112),c=r(1581),d={[n.ContentItemType.Image]:i.ImageLoader,[n.ContentItemType.Sound]:i.SoundLoader,[n.ContentItemType.Font]:i.FontLoader,[n.ContentItemType.JSON]:i.JSONLoader};class l{constructor(e){this.items={},this.content=e}static initialise(){const e=o,t=(new c.default).compile({type:"object",properties:{items:{type:"array",items:{type:"object",properties:{name:{type:"string"},type:{type:"string",enum:Object.values(n.ContentItemType)},args:{type:"array",items:{type:"string"}}}}}}});if(!t(e))throw a.DEBUG&&console.log(t.errors),new Error("Invalid content manifest");l.instance=new l(e.items)}static getInstance(){if(void 0===l.instance)throw new Error("Content manager not properly initialised");return l.instance}static async load(){if(l.loaded)throw new Error("Content already loaded");const e=l.getInstance();if(0===e.content.length)throw new Error("No content items to load");const t=1/e.content.length;for(const r of e.content)a.DEBUG&&a.SIMULATE_SLOW_LOADING&&await s.sleep(Math.randomBetween(100,1e3)),e.items[r.name]=await d[r.type](...r.args),l.progress=Math.clamp(l.progress+t,0,1);l.loaded=!0}static get(e){if(!l.loaded)throw new Error("Content not loaded");const t=l.getInstance();if(!(e in t.items))throw new Error(`Content item "${e}" not found`);return t.items[e]}}t.default=l,l.progress=0,l.loaded=!1},9717:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FontLoader=void 0,t.FontLoader=async(e,t)=>new Promise(((r,s)=>{new FontFace(t,`url(${e})`).load().then((e=>{document.fonts.add(e),r(e)})).catch((()=>{s(`Error loading font "${e}"`)}))}))},3022:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ImageLoader=void 0,t.ImageLoader=async e=>new Promise(((t,r)=>{const s=new Image;s.src=e,s.addEventListener("load",(()=>{t(s)})),s.addEventListener("error",(()=>{r(`Error loading image "${e}"`)}))}))},1463:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSONLoader=void 0,t.JSONLoader=async e=>new Promise(((t,r)=>{window.fetch(e,{method:"GET",headers:{"content-type":"application/json;charset=UTF-8"}}).then((e=>e.json())).then((e=>{t(e)})).catch((()=>{r(`Error loading json "${e}"`)}))}))},9170:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SoundLoader=void 0,t.SoundLoader=async e=>new Promise(((t,r)=>{const s=new Audio(e);s.addEventListener("loadeddata",(()=>{t(s)})),s.addEventListener("error",(()=>{r(`Error loading sound "${e}"`)}))}))},9112:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SoundLoader=t.JSONLoader=t.ImageLoader=t.FontLoader=void 0;var s=r(9717);Object.defineProperty(t,"FontLoader",{enumerable:!0,get:function(){return s.FontLoader}});var a=r(3022);Object.defineProperty(t,"ImageLoader",{enumerable:!0,get:function(){return a.ImageLoader}});var o=r(1463);Object.defineProperty(t,"JSONLoader",{enumerable:!0,get:function(){return o.JSONLoader}});var n=r(9170);Object.defineProperty(t,"SoundLoader",{enumerable:!0,get:function(){return n.SoundLoader}})},7900:(e,t)=>{"use strict";var r,s,a,o;Object.defineProperty(t,"__esModule",{value:!0}),t.Anchor=t.Key=t.StateTransitionType=t.ContentItemType=void 0,(o=t.ContentItemType||(t.ContentItemType={})).Image="image",o.Sound="sound",o.Font="font",o.JSON="json",(a=t.StateTransitionType||(t.StateTransitionType={}))[a.In=0]="In",a[a.Out=1]="Out",a[a.None=2]="None",(s=t.Key||(t.Key={})).Up="ArrowUp",s.Down="ArrowDown",s.Left="ArrowLeft",s.Right="ArrowRight",s.Enter="Enter",s.Shift="Shift",s.Control="Control",s.Escape="Escape",(r=t.Anchor||(t.Anchor={}))[r.TopLeft=0]="TopLeft",r[r.TopCenter=1]="TopCenter",r[r.TopRight=2]="TopRight",r[r.CenterLeft=3]="CenterLeft",r[r.Center=4]="Center",r[r.CenterRight=5]="CenterRight",r[r.BottomLeft=6]="BottomLeft",r[r.BottomCenter=7]="BottomCenter",r[r.BottomRight=8]="BottomRight"},3607:(e,t,r)=>{"use strict";const s=r(9221);window.onload=()=>{new s.default(document.querySelector("#game")).initialise()}},5791:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(934);class a{constructor(e,t){this.selected=!1,this.transition=0,this.position=e,this.label=new s.Text(t,this.position,{font:"aniron",size:10,colour:"#000"}),this.backgroundImage=new s.Image("menu_button",this.position),this.selectedBackgroundImage=new s.Image("menu_button_selected",this.position)}update(e){const t=e/a.TRANSITION_TIME;this.selected?this.transition+=t:this.transition-=t,this.transition=Math.clamp(this.transition)}draw(e){this.backgroundImage.draw(e),this.transition>0&&(e.save(),e.globalAlpha=this.transition,this.selectedBackgroundImage.draw(e),e.restore()),this.label.draw(e)}}t.default=a,a.TRANSITION_TIME=1},2148:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0;const s=r(3044),a=r(7900);t.Component=class{constructor(e=s.vec()){this.position=e,this.canvas=document.createElement("canvas");const t=this.canvas.getContext("2d");if(null===t)throw new Error("Couldn't get a 2d context.");this.context=t}get anchorOffset(){switch(this.options.anchor){case a.Anchor.TopLeft:return s.vec(0,0);case a.Anchor.TopCenter:return s.vec(-this.canvas.width/2,0);case a.Anchor.TopRight:return s.vec(-this.canvas.width,0);case a.Anchor.CenterLeft:return s.vec(0,-this.canvas.height/2);case a.Anchor.Center:return s.vec(-this.canvas.width/2,-this.canvas.height/2);case a.Anchor.CenterRight:return s.vec(-this.canvas.width,-this.canvas.height/2);case a.Anchor.BottomLeft:return s.vec(0,-this.canvas.height);case a.Anchor.BottomCenter:return s.vec(-this.canvas.width/2,-this.canvas.height);case a.Anchor.BottomRight:return s.vec(this.canvas.width/2,-this.canvas.height)}}}},4210:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Image=void 0;const s=r(3044),a=r(7614),o=r(7900),n=r(2148);class i extends n.Component{constructor(e,t=s.vec(),r={}){super(t),this.defaultOptions={anchor:o.Anchor.Center},this.options=Object.assign({},this.defaultOptions,r),this.image=a.default.get(e),this.canvas.width=this.image.width,this.canvas.height=this.image.height}update(){}draw(e){this.drawImage();const t=s.vec.map(s.vec.add(this.position,this.anchorOffset),Math.floor);e.drawImage(this.canvas,t.x,t.y)}drawImage(){this.context.save(),this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.image,0,0),this.context.restore()}}t.Image=i},4754:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProgressBar=void 0;const s=r(3044),a=r(7900),o=r(9005),n=r(2148);class i extends n.Component{constructor(e=s.vec(),t={}){super(e),this.progress=0,this.actualProgress=0,this.defaultOptions={anchor:a.Anchor.Center,size:s.vec(120,14),ease:.9,padding:4,borderColour:"#b75",borderWidth:2,borderRadius:6,barColour:"#fec",barRadius:3},this.options=Object.assign({},this.defaultOptions,t),this.canvas.width=this.options.size.x,this.canvas.height=this.options.size.y}update(e){const t=this.progress-this.actualProgress;this.actualProgress+=t*e*this.options.ease}draw(e){this.drawProgressBar();const t=s.vec.map(s.vec.add(this.position,this.anchorOffset),Math.floor);e.drawImage(this.canvas,t.x,t.y)}drawProgressBar(){this.context.save(),this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.strokeStyle=this.options.borderColour,this.context.lineWidth=this.options.borderWidth,o.roundedRectangle(this.context,s.vec(0,0),this.options.size,this.options.borderRadius),this.context.stroke(),this.context.fillStyle=this.options.barColour;const e=(this.options.size.x-2*this.options.padding)*this.actualProgress;o.roundedRectangle(this.context,s.vec(this.options.padding),s.vec(e,this.options.size.y-2*this.options.padding),Math.min(e,this.options.barRadius)),this.context.fill(),this.context.restore()}}t.ProgressBar=i},2680:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Text=void 0;const s=r(3044),a=r(7900),o=r(2148);class n extends o.Component{constructor(e,t=s.vec(),r={}){super(t),this.defaultOptions={anchor:a.Anchor.Center,size:30,font:"sans-serif",padding:4,colour:"#ffc"},this.text=e,this.options=Object.assign({},this.defaultOptions,r),this.context.font=`${this.options.size}px ${this.options.font}`,this.context.textBaseline="top",this.canvas.width=this.context.measureText(e).width+2*this.options.padding,this.canvas.height=this.options.size+2*this.options.padding}update(){}draw(e){this.drawText();const t=s.vec.map(s.vec.add(this.position,this.anchorOffset),Math.floor);e.drawImage(this.canvas,t.x,t.y)}drawText(){this.context.save(),this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.font=`${this.options.size}px ${this.options.font}`,this.context.textBaseline="top",this.context.fillStyle=this.options.colour,this.context.fillText(this.text,this.options.padding,this.options.padding),this.context.restore()}}t.Text=n},934:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProgressBar=t.Image=t.Text=void 0;var s=r(2680);Object.defineProperty(t,"Text",{enumerable:!0,get:function(){return s.Text}});var a=r(4210);Object.defineProperty(t,"Image",{enumerable:!0,get:function(){return a.Image}});var o=r(4754);Object.defineProperty(t,"ProgressBar",{enumerable:!0,get:function(){return o.ProgressBar}})},1347:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IntroState=void 0;const s=r(7449),a=r(7900),o=r(670),n=r(1663),i=r(2713),c=r(3044),d=r(934);class l extends s.State{constructor(){super({transitionTime:l.TRANSITION_TIME})}initialise(){this.skipLockTime=l.SKIPLOCK_TIME,this.autoSkipTime=l.AUTOSKIP_TIME,this.logo=new d.Image("logo")}update(e){this.skipLockTime-=e,this.autoSkipTime-=e,(this.skipLockTime<=0&&o.default.keyPressed()||this.autoSkipTime<=0)&&(n.default.pop(),n.default.push(new i.MainMenuState))}draw(e,t){e.save(),this.transitionType!==a.StateTransitionType.None&&(e.globalAlpha=this.transitionAmount),this.logo.position=c.vec.map(c.vec.mul(t,.5),Math.floor),this.logo.draw(e),e.restore()}}t.IntroState=l,l.TRANSITION_TIME=5,l.SKIPLOCK_TIME=4,l.AUTOSKIP_TIME=10},9830:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoadingState=void 0;const s=r(5601),a=r(7449),o=r(7900),n=r(7614),i=r(1663),c=r(934),d=r(2713),l=r(3044);class u extends a.State{constructor(){super({transitionTime:u.TRANSITION_TIME})}initialise(){this.finishedLoadingContent=!1,this.progressBar=new c.ProgressBar,this.cooldownTime=u.COOLDOWN_TIME,n.default.load().then((()=>{this.finishedLoadingContent=!0})).catch((e=>{s.DEBUG&&console.log("Unable to load content: "+e)}))}update(e){this.progressBar.progress=n.default.progress,this.progressBar.update(e),this.finishedLoadingContent&&(this.cooldownTime-=e),this.cooldownTime<=0&&(i.default.pop(),setTimeout((()=>{i.default.push(new d.IntroState)}),1e3*u.INTRO_DELAY))}draw(e,t){e.save(),this.transitionType!==o.StateTransitionType.None&&(e.globalAlpha=this.transitionAmount),this.progressBar.position=l.vec.map(l.vec.mul(t,.5),Math.floor),this.progressBar.draw(e),e.restore()}}t.LoadingState=u,u.TRANSITION_TIME=.5,u.COOLDOWN_TIME=3,u.INTRO_DELAY=1},2979:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MainMenuState=void 0;const s=r(269),a=r(7449),o=r(7900),n=r(7614),i=r(3044),c=r(5791);class d extends a.State{initialise(){this.background=n.default.get("menu_background"),this.testMenuItem=new c.default(i.vec(100,100),"Test Button")}update(e){}draw(e,t){e.save(),this.transitionType!==o.StateTransitionType.None&&(e.globalAlpha=this.transitionAmount),this.backgroundPattern||(this.backgroundPattern=e.createPattern(this.background,"repeat")),this.backgroundPattern&&(e.fillStyle=this.backgroundPattern,e.fillRect(0,0,e.canvas.width*s.scaleFactor,e.canvas.height*s.scaleFactor)),this.testMenuItem.draw(e),e.restore()}}t.MainMenuState=d},7449:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.State=void 0;const s=r(7900);t.State=class{constructor(e={}){this.defaultOptions={transitionTime:2},this.transitionType=s.StateTransitionType.None,this.transitionAmount=0,this.disposed=!1;const t=Object.assign({},this.defaultOptions,e);this.transitionTime=t.transitionTime}dispose(){this.disposed=!0}transitionIn(){this.transitionType=s.StateTransitionType.In}transitionOut(){this.transitionType=s.StateTransitionType.Out}updateTransition(e){const t=e/this.transitionTime;this.transitionType===s.StateTransitionType.In&&(this.transitionAmount<1?this.transitionAmount=Math.clamp(this.transitionAmount+t):this.transitionType=s.StateTransitionType.None),this.transitionType===s.StateTransitionType.Out&&(this.transitionAmount>0?this.transitionAmount=Math.clamp(this.transitionAmount-t):this.dispose())}}},1663:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(7900);class a{constructor(){this.states=[]}static initialise(){a.instance=new a}static getInstance(){if(void 0===a.instance)throw new Error("State manager not properly initialised");return a.instance}static push(e){return a.getInstance().states.push(e),e.initialise(),e.transitionIn(),e}static pop(){const e=a.getInstance();if(e.states.length>0){let t=e.states.length-1;for(;t>0&&e.states[t].transitionType===s.StateTransitionType.Out;)t--;if(t>=0){const r=e.states[t];return r.transitionOut(),r}}return null}static clear(){a.getInstance().states.forEach((e=>{e.transitionType!==s.StateTransitionType.Out&&e.transitionOut()}))}static update(e){const t=a.getInstance();if(t.states.length>0){for(let r=t.states.length;r--;)if(t.states[r].transitionType!==s.StateTransitionType.Out){t.states[r].update(e);break}t.states.forEach((t=>{t.updateTransition(e)})),t.states=t.states.filter((e=>!e.disposed))}}static draw(e,t){const r=a.getInstance();for(const s of r.states)s.draw(e,t)}}t.default=a},2713:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MainMenuState=t.IntroState=t.LoadingState=void 0;var s=r(9830);Object.defineProperty(t,"LoadingState",{enumerable:!0,get:function(){return s.LoadingState}});var a=r(1347);Object.defineProperty(t,"IntroState",{enumerable:!0,get:function(){return a.IntroState}});var o=r(2979);Object.defineProperty(t,"MainMenuState",{enumerable:!0,get:function(){return o.MainMenuState}})},9005:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.roundedRectangle=t.sleep=void 0,t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))},t.roundedRectangle=function(e,t,r,s){e.beginPath(),e.moveTo(t.x+s,t.y),e.lineTo(t.x+r.x-s,t.y),e.quadraticCurveTo(t.x+r.x,t.y,t.x+r.x,t.y+s),e.lineTo(t.x+r.x,t.y+r.y-s),e.quadraticCurveTo(t.x+r.x,t.y+r.y,t.x+r.x-s,t.y+r.y),e.lineTo(t.x+s,t.y+r.y),e.quadraticCurveTo(t.x,t.y+r.y,t.x,t.y+r.y-s),e.lineTo(t.x,t.y+s),e.quadraticCurveTo(t.x,t.y,t.x+s,t.y),e.closePath()}},540:function(e,t){!function(e){"use strict";function t(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t.length>1){t[0]=t[0].slice(0,-1);for(var s=t.length-1,a=1;a<s;++a)t[a]=t[a].slice(1,-1);return t[s]=t[s].slice(1),t.join("")}return t[0]}function r(e){return"(?:"+e+")"}function s(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function a(e){return e.toUpperCase()}function o(e){var s="[A-Za-z]",a="[0-9]",o=t(a,"[A-Fa-f]"),n=r(r("%[EFef]"+o+"%"+o+o+"%"+o+o)+"|"+r("%[89A-Fa-f]"+o+"%"+o+o)+"|"+r("%"+o+o)),i="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",c=t("[\\:\\/\\?\\#\\[\\]\\@]",i),d=e?"[\\uE000-\\uF8FF]":"[]",l=t(s,a,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]"),u=r(s+t(s,a,"[\\+\\-\\.]")+"*"),h=r(r(n+"|"+t(l,i,"[\\:]"))+"*"),p=(r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("[1-9][0-9]")+"|"+a),r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("0?[1-9][0-9]")+"|0?0?"+a)),f=r(p+"\\."+p+"\\."+p+"\\."+p),m=r(o+"{1,4}"),y=r(r(m+"\\:"+m)+"|"+f),g=r(r(m+"\\:")+"{6}"+y),v=r("\\:\\:"+r(m+"\\:")+"{5}"+y),w=r(r(m)+"?\\:\\:"+r(m+"\\:")+"{4}"+y),$=r(r(r(m+"\\:")+"{0,1}"+m)+"?\\:\\:"+r(m+"\\:")+"{3}"+y),_=r(r(r(m+"\\:")+"{0,2}"+m)+"?\\:\\:"+r(m+"\\:")+"{2}"+y),b=r(r(r(m+"\\:")+"{0,3}"+m)+"?\\:\\:"+m+"\\:"+y),S=r(r(r(m+"\\:")+"{0,4}"+m)+"?\\:\\:"+y),E=r(r(r(m+"\\:")+"{0,5}"+m)+"?\\:\\:"+m),P=r(r(r(m+"\\:")+"{0,6}"+m)+"?\\:\\:"),T=r([g,v,w,$,_,b,S,E,P].join("|")),k=r(r(l+"|"+n)+"+"),O=(r(T+"\\%25"+k),r(T+r("\\%25|\\%(?!"+o+"{2})")+k)),x=r("[vV]"+o+"+\\."+t(l,i,"[\\:]")+"+"),C=r("\\["+r(O+"|"+T+"|"+x)+"\\]"),N=r(r(n+"|"+t(l,i))+"*"),j=r(C+"|"+f+"(?!"+N+")|"+N),I=r("[0-9]*"),M=r(r(h+"@")+"?"+j+r("\\:"+I)+"?"),R=r(n+"|"+t(l,i,"[\\:\\@]")),A=r(R+"*"),D=r(R+"+"),L=r(r(n+"|"+t(l,i,"[\\@]"))+"+"),F=r(r("\\/"+A)+"*"),V=r("\\/"+r(D+F)+"?"),U=r(L+F),z=r(D+F),K="(?!"+R+")",q=(r(F+"|"+V+"|"+U+"|"+z+"|"+K),r(r(R+"|"+t("[\\/\\?]",d))+"*")),B=r(r(R+"|[\\/\\?]")+"*"),G=r(r("\\/\\/"+M+F)+"|"+V+"|"+z+"|"+K),H=r(u+"\\:"+G+r("\\?"+q)+"?"+r("\\#"+B)+"?"),J=r(r("\\/\\/"+M+F)+"|"+V+"|"+U+"|"+K),W=r(J+r("\\?"+q)+"?"+r("\\#"+B)+"?");return r(H+"|"+W),r(u+"\\:"+G+r("\\?"+q)+"?"),r(r("\\/\\/("+r("("+h+")@")+"?("+j+")"+r("\\:("+I+")")+"?)")+"?("+F+"|"+V+"|"+z+"|"+K+")"),r("\\?("+q+")"),r("\\#("+B+")"),r(r("\\/\\/("+r("("+h+")@")+"?("+j+")"+r("\\:("+I+")")+"?)")+"?("+F+"|"+V+"|"+U+"|"+K+")"),r("\\?("+q+")"),r("\\#("+B+")"),r(r("\\/\\/("+r("("+h+")@")+"?("+j+")"+r("\\:("+I+")")+"?)")+"?("+F+"|"+V+"|"+z+"|"+K+")"),r("\\?("+q+")"),r("\\#("+B+")"),r("("+h+")@"),r("\\:("+I+")"),{NOT_SCHEME:new RegExp(t("[^]",s,a,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",l,i),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",l,i),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",l,i),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",l,i),"g"),NOT_QUERY:new RegExp(t("[^\\%]",l,i,"[\\:\\@\\/\\?]",d),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",l,i,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",l,i),"g"),UNRESERVED:new RegExp(l,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",l,c),"g"),PCT_ENCODED:new RegExp(n,"g"),IPV4ADDRESS:new RegExp("^("+f+")$"),IPV6ADDRESS:new RegExp("^\\[?("+T+")"+r(r("\\%25|\\%(?!"+o+"{2})")+"("+k+")")+"?\\]?$")}}var n=o(!1),i=o(!0),c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],s=!0,a=!1,o=void 0;try{for(var n,i=e[Symbol.iterator]();!(s=(n=i.next()).done)&&(r.push(n.value),!t||r.length!==t);s=!0);}catch(e){a=!0,o=e}finally{try{!s&&i.return&&i.return()}finally{if(a)throw o}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},d=2147483647,l=36,u=/^xn--/,h=/[^\0-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},m=Math.floor,y=String.fromCharCode;function g(e){throw new RangeError(f[e])}function v(e,t){var r=e.split("@"),s="";return r.length>1&&(s=r[0]+"@",e=r[1]),s+function(e,t){for(var r=[],s=e.length;s--;)r[s]=t(e[s]);return r}((e=e.replace(p,".")).split("."),t).join(".")}function w(e){for(var t=[],r=0,s=e.length;r<s;){var a=e.charCodeAt(r++);if(a>=55296&&a<=56319&&r<s){var o=e.charCodeAt(r++);56320==(64512&o)?t.push(((1023&a)<<10)+(1023&o)+65536):(t.push(a),r--)}else t.push(a)}return t}var $=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},_=function(e,t,r){var s=0;for(e=r?m(e/700):e>>1,e+=m(e/t);e>455;s+=l)e=m(e/35);return m(s+36*e/(e+38))},b=function(e){var t,r=[],s=e.length,a=0,o=128,n=72,i=e.lastIndexOf("-");i<0&&(i=0);for(var c=0;c<i;++c)e.charCodeAt(c)>=128&&g("not-basic"),r.push(e.charCodeAt(c));for(var u=i>0?i+1:0;u<s;){for(var h=a,p=1,f=l;;f+=l){u>=s&&g("invalid-input");var y=(t=e.charCodeAt(u++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:l;(y>=l||y>m((d-a)/p))&&g("overflow"),a+=y*p;var v=f<=n?1:f>=n+26?26:f-n;if(y<v)break;var w=l-v;p>m(d/w)&&g("overflow"),p*=w}var $=r.length+1;n=_(a-h,$,0==h),m(a/$)>d-o&&g("overflow"),o+=m(a/$),a%=$,r.splice(a++,0,o)}return String.fromCodePoint.apply(String,r)},S=function(e){var t=[],r=(e=w(e)).length,s=128,a=0,o=72,n=!0,i=!1,c=void 0;try{for(var u,h=e[Symbol.iterator]();!(n=(u=h.next()).done);n=!0){var p=u.value;p<128&&t.push(y(p))}}catch(e){i=!0,c=e}finally{try{!n&&h.return&&h.return()}finally{if(i)throw c}}var f=t.length,v=f;for(f&&t.push("-");v<r;){var b=d,S=!0,E=!1,P=void 0;try{for(var T,k=e[Symbol.iterator]();!(S=(T=k.next()).done);S=!0){var O=T.value;O>=s&&O<b&&(b=O)}}catch(e){E=!0,P=e}finally{try{!S&&k.return&&k.return()}finally{if(E)throw P}}var x=v+1;b-s>m((d-a)/x)&&g("overflow"),a+=(b-s)*x,s=b;var C=!0,N=!1,j=void 0;try{for(var I,M=e[Symbol.iterator]();!(C=(I=M.next()).done);C=!0){var R=I.value;if(R<s&&++a>d&&g("overflow"),R==s){for(var A=a,D=l;;D+=l){var L=D<=o?1:D>=o+26?26:D-o;if(A<L)break;var F=A-L,V=l-L;t.push(y($(L+F%V,0))),A=m(F/V)}t.push(y($(A,0))),o=_(a,x,v==f),a=0,++v}}}catch(e){N=!0,j=e}finally{try{!C&&M.return&&M.return()}finally{if(N)throw j}}++a,++s}return t.join("")},E=function(e){return v(e,(function(e){return h.test(e)?"xn--"+S(e):e}))},P=function(e){return v(e,(function(e){return u.test(e)?b(e.slice(4).toLowerCase()):e}))},T={};function k(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function O(e){for(var t="",r=0,s=e.length;r<s;){var a=parseInt(e.substr(r+1,2),16);if(a<128)t+=String.fromCharCode(a),r+=3;else if(a>=194&&a<224){if(s-r>=6){var o=parseInt(e.substr(r+4,2),16);t+=String.fromCharCode((31&a)<<6|63&o)}else t+=e.substr(r,6);r+=6}else if(a>=224){if(s-r>=9){var n=parseInt(e.substr(r+4,2),16),i=parseInt(e.substr(r+7,2),16);t+=String.fromCharCode((15&a)<<12|(63&n)<<6|63&i)}else t+=e.substr(r,9);r+=9}else t+=e.substr(r,3),r+=3}return t}function x(e,t){function r(e){var r=O(e);return r.match(t.UNRESERVED)?r:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,r).replace(t.NOT_USERINFO,k).replace(t.PCT_ENCODED,a)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_HOST,k).replace(t.PCT_ENCODED,a)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,r).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,k).replace(t.PCT_ENCODED,a)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,r).replace(t.NOT_QUERY,k).replace(t.PCT_ENCODED,a)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,r).replace(t.NOT_FRAGMENT,k).replace(t.PCT_ENCODED,a)),e}function C(e){return e.replace(/^0*(.*)/,"$1")||"0"}function N(e,t){var r=e.match(t.IPV4ADDRESS)||[],s=c(r,2)[1];return s?s.split(".").map(C).join("."):e}function j(e,t){var r=e.match(t.IPV6ADDRESS)||[],s=c(r,3),a=s[1],o=s[2];if(a){for(var n=a.toLowerCase().split("::").reverse(),i=c(n,2),d=i[0],l=i[1],u=l?l.split(":").map(C):[],h=d.split(":").map(C),p=t.IPV4ADDRESS.test(h[h.length-1]),f=p?7:8,m=h.length-f,y=Array(f),g=0;g<f;++g)y[g]=u[g]||h[m+g]||"";p&&(y[f-1]=N(y[f-1],t));var v=y.reduce((function(e,t,r){if(!t||"0"===t){var s=e[e.length-1];s&&s.index+s.length===r?s.length++:e.push({index:r,length:1})}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],w=void 0;if(v&&v.length>1){var $=y.slice(0,v.index),_=y.slice(v.index+v.length);w=$.join(":")+"::"+_.join(":")}else w=y.join(":");return o&&(w+="%"+o),w}return e}var I=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,M=void 0==="".match(/(){0}/)[1];function R(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={},s=!1!==t.iri?i:n;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var a=e.match(I);if(a){M?(r.scheme=a[1],r.userinfo=a[3],r.host=a[4],r.port=parseInt(a[5],10),r.path=a[6]||"",r.query=a[7],r.fragment=a[8],isNaN(r.port)&&(r.port=a[5])):(r.scheme=a[1]||void 0,r.userinfo=-1!==e.indexOf("@")?a[3]:void 0,r.host=-1!==e.indexOf("//")?a[4]:void 0,r.port=parseInt(a[5],10),r.path=a[6]||"",r.query=-1!==e.indexOf("?")?a[7]:void 0,r.fragment=-1!==e.indexOf("#")?a[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?a[4]:void 0)),r.host&&(r.host=j(N(r.host,s),s)),void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?r.reference="relative":void 0===r.fragment?r.reference="absolute":r.reference="uri":r.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var o=T[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||o&&o.unicodeSupport)x(r,s);else{if(r.host&&(t.domainHost||o&&o.domainHost))try{r.host=E(r.host.replace(s.PCT_ENCODED,O).toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e}x(r,n)}o&&o.parse&&o.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}function A(e,t){var r=!1!==t.iri?i:n,s=[];return void 0!==e.userinfo&&(s.push(e.userinfo),s.push("@")),void 0!==e.host&&s.push(j(N(String(e.host),r),r).replace(r.IPV6ADDRESS,(function(e,t,r){return"["+t+(r?"%25"+r:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(s.push(":"),s.push(String(e.port))),s.length?s.join(""):void 0}var D=/^\.\.?\//,L=/^\/\.(\/|$)/,F=/^\/\.\.(\/|$)/,V=/^\/?(?:.|\n)*?(?=\/|$)/;function U(e){for(var t=[];e.length;)if(e.match(D))e=e.replace(D,"");else if(e.match(L))e=e.replace(L,"/");else if(e.match(F))e=e.replace(F,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(V);if(!r)throw new Error("Unexpected dot segment condition");var s=r[0];e=e.slice(s.length),t.push(s)}return t.join("")}function z(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.iri?i:n,s=[],a=T[(t.scheme||e.scheme||"").toLowerCase()];if(a&&a.serialize&&a.serialize(e,t),e.host)if(r.IPV6ADDRESS.test(e.host));else if(t.domainHost||a&&a.domainHost)try{e.host=t.iri?P(e.host):E(e.host.replace(r.PCT_ENCODED,O).toLowerCase())}catch(r){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+r}x(e,r),"suffix"!==t.reference&&e.scheme&&(s.push(e.scheme),s.push(":"));var o=A(e,t);if(void 0!==o&&("suffix"!==t.reference&&s.push("//"),s.push(o),e.path&&"/"!==e.path.charAt(0)&&s.push("/")),void 0!==e.path){var c=e.path;t.absolutePath||a&&a.absolutePath||(c=U(c)),void 0===o&&(c=c.replace(/^\/\//,"/%2F")),s.push(c)}return void 0!==e.query&&(s.push("?"),s.push(e.query)),void 0!==e.fragment&&(s.push("#"),s.push(e.fragment)),s.join("")}function K(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},s={};return arguments[3]||(e=R(z(e,r),r),t=R(z(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(s.scheme=t.scheme,s.userinfo=t.userinfo,s.host=t.host,s.port=t.port,s.path=U(t.path||""),s.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(s.userinfo=t.userinfo,s.host=t.host,s.port=t.port,s.path=U(t.path||""),s.query=t.query):(t.path?("/"===t.path.charAt(0)?s.path=U(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?s.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:s.path=t.path:s.path="/"+t.path,s.path=U(s.path)),s.query=t.query):(s.path=e.path,void 0!==t.query?s.query=t.query:s.query=e.query),s.userinfo=e.userinfo,s.host=e.host,s.port=e.port),s.scheme=e.scheme),s.fragment=t.fragment,s}function q(e,t){return e&&e.toString().replace(t&&t.iri?i.PCT_ENCODED:n.PCT_ENCODED,O)}var B={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},G={scheme:"https",domainHost:B.domainHost,parse:B.parse,serialize:B.serialize};function H(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var J={scheme:"ws",domainHost:!0,parse:function(e,t){var r=e;return r.secure=H(r),r.resourceName=(r.path||"/")+(r.query?"?"+r.query:""),r.path=void 0,r.query=void 0,r},serialize:function(e,t){if(e.port!==(H(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var r=e.resourceName.split("?"),s=c(r,2),a=s[0],o=s[1];e.path=a&&"/"!==a?a:void 0,e.query=o,e.resourceName=void 0}return e.fragment=void 0,e}},W={scheme:"wss",domainHost:J.domainHost,parse:J.parse,serialize:J.serialize},Q={},Y="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",Z="[0-9A-Fa-f]",X=r(r("%[EFef][0-9A-Fa-f]%"+Z+Z+"%"+Z+Z)+"|"+r("%[89A-Fa-f][0-9A-Fa-f]%"+Z+Z)+"|"+r("%"+Z+Z)),ee=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),te=new RegExp(Y,"g"),re=new RegExp(X,"g"),se=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',ee),"g"),ae=new RegExp(t("[^]",Y,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),oe=ae;function ne(e){var t=O(e);return t.match(te)?t:e}var ie={scheme:"mailto",parse:function(e,t){var r=e,s=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var a=!1,o={},n=r.query.split("&"),i=0,c=n.length;i<c;++i){var d=n[i].split("=");switch(d[0]){case"to":for(var l=d[1].split(","),u=0,h=l.length;u<h;++u)s.push(l[u]);break;case"subject":r.subject=q(d[1],t);break;case"body":r.body=q(d[1],t);break;default:a=!0,o[q(d[0],t)]=q(d[1],t)}}a&&(r.headers=o)}r.query=void 0;for(var p=0,f=s.length;p<f;++p){var m=s[p].split("@");if(m[0]=q(m[0]),t.unicodeSupport)m[1]=q(m[1],t).toLowerCase();else try{m[1]=E(q(m[1],t).toLowerCase())}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}s[p]=m.join("@")}return r},serialize:function(e,t){var r,s=e,o=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(o){for(var n=0,i=o.length;n<i;++n){var c=String(o[n]),d=c.lastIndexOf("@"),l=c.slice(0,d).replace(re,ne).replace(re,a).replace(se,k),u=c.slice(d+1);try{u=t.iri?P(u):E(q(u,t).toLowerCase())}catch(e){s.error=s.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}o[n]=l+"@"+u}s.path=o.join(",")}var h=e.headers=e.headers||{};e.subject&&(h.subject=e.subject),e.body&&(h.body=e.body);var p=[];for(var f in h)h[f]!==Q[f]&&p.push(f.replace(re,ne).replace(re,a).replace(ae,k)+"="+h[f].replace(re,ne).replace(re,a).replace(oe,k));return p.length&&(s.query=p.join("&")),s}},ce=/^([^\:]+)\:(.*)/,de={scheme:"urn",parse:function(e,t){var r=e.path&&e.path.match(ce),s=e;if(r){var a=t.scheme||s.scheme||"urn",o=r[1].toLowerCase(),n=r[2],i=a+":"+(t.nid||o),c=T[i];s.nid=o,s.nss=n,s.path=void 0,c&&(s=c.parse(s,t))}else s.error=s.error||"URN can not be parsed.";return s},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",s=e.nid,a=r+":"+(t.nid||s),o=T[a];o&&(e=o.serialize(e,t));var n=e,i=e.nss;return n.path=(s||t.nid)+":"+i,n}},le=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,ue={scheme:"urn:uuid",parse:function(e,t){var r=e;return r.uuid=r.nss,r.nss=void 0,t.tolerant||r.uuid&&r.uuid.match(le)||(r.error=r.error||"UUID is not valid."),r},serialize:function(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}};T[B.scheme]=B,T[G.scheme]=G,T[J.scheme]=J,T[W.scheme]=W,T[ie.scheme]=ie,T[de.scheme]=de,T[ue.scheme]=ue,e.SCHEMES=T,e.pctEncChar=k,e.pctDecChars=O,e.parse=R,e.removeDotSegments=U,e.serialize=z,e.resolveComponents=K,e.resolve=function(e,t,r){var s=function(e,t){var r=e;if(t)for(var s in t)r[s]=t[s];return r}({scheme:"null"},r);return z(K(R(e,s),R(t,s),s,!0),s)},e.normalize=function(e,t){return"string"==typeof e?e=z(R(e,t),t):"object"===s(e)&&(e=R(z(e,t),t)),e},e.equal=function(e,t,r){return"string"==typeof e?e=z(R(e,r),r):"object"===s(e)&&(e=z(e,r)),"string"==typeof t?t=z(R(t,r),r):"object"===s(t)&&(t=z(t,r)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?i.ESCAPE:n.ESCAPE,k)},e.unescapeComponent=q,Object.defineProperty(e,"__esModule",{value:!0})}(t)},269:e=>{"use strict";e.exports=JSON.parse('{"title":"RPG Game","scaleFactor":2,"showFPS":true}')}},t={};!function r(s){if(t[s])return t[s].exports;var a=t[s]={exports:{}};return e[s].call(a.exports,a,a.exports,r),a.exports}(3607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,