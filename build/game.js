(()=>{var t={44:t=>{Math.floatEquals=(t,e,n=Number.EPSILON)=>Math.abs(t-e)<n,Math.clamp=(t,e=0,n=1)=>t<e?e:t>n?n:t,Math.frac=t=>t>=0?t-Math.floor(t):t-Math.ceil(t),Math.lerp=(t,e,n)=>t+(e-t)*n,Math.unlerp=(t,e,n)=>(n-t)/(e-t),Math.blerp=(t,e,n,s,i,a)=>Math.lerp(Math.lerp(t,e,i),Math.lerp(n,s,i),a),Math.remap=(t,e,n,s,i)=>s+(t-e)*(i-s)/(n-e),Math.smoothstep=(t,e,n)=>Math.lerp(t,e,3*Math.pow(n,2)-2*Math.pow(n,3)),Math.radians=t=>Math.PI/180*t,Math.degrees=t=>180/Math.PI*t,Math.randomBetween=(t,e)=>Math.random()*(e-t)+t,Math.randomIntBetween=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,Math.cltRandom=(t=.5,e=.5,n=2)=>{let s=0;for(let t=n;t--;)s+=Math.random();return t+(s-n/2)/(n/2)*e},Math.cltRandomInt=(t,e)=>Math.floor(t+Math.cltRandom(.5,.5,2)*(e+1-t)),Math.weightedRandom=t=>{let e=t.reduce(((t,e)=>t+e),0),n=0;const s=Math.random()*e;for(;e>s;)e-=t[n++];return n-1},Math.lerpArray=(t,e,n=Math.lerp)=>{const s=e*(t.length-1),i=Math.clamp(Math.trunc(s),0,t.length-1);return n(t[i]||0,t[i+1]||0,Math.frac(s))},Math.dot=(t,e)=>t.reduce(((t,n,s)=>t+n*e[s]),0),Array.times=(t,e)=>Array(e).fill(0).map(((e,n)=>t(n))),Array.range=t=>Array.times((t=>t),t),Object.defineProperty(Array.prototype,"at",{value:function(t){const e=this.length;return this[t<0?e-Math.abs(t+1)%e-1:t%e]}}),Object.defineProperty(Array.prototype,"chunk",{value:function(t){return Array.times((e=>this.slice(e*t,e*t+t)),Math.ceil(this.length/t))}}),Object.defineProperty(Array.prototype,"shuffle",{value:function(){return this.map((t=>[Math.random(),t])).sort(((t,e)=>t[0]-e[0])).map((t=>t[1]))}});const e=(t,e)=>t||e?"object"==typeof t?{x:t.x||0,y:t.y||0}:null==e?{x:t,y:t}:{x:t,y:e}:{x:0,y:0};e.components=t=>[t.x,t.y],e.ux=()=>e(1,0),e.uy=()=>e(0,1),e.add=(t,e)=>({x:t.x+e.x,y:t.y+e.y}),e.mul=(t,e)=>({x:t.x*e,y:t.y*e}),e.sub=(t,e)=>({x:t.x-e.x,y:t.y-e.y}),e.len=t=>Math.sqrt(t.x*t.x+t.y*t.y),e.manhattan=t=>Math.abs(t.x)+Math.abs(t.y),e.nor=t=>{let n=e.len(t);return n?{x:t.x/n,y:t.y/n}:e()},e.dot=(t,e)=>t.x*e.x+t.y*e.y,e.rot=(t,e)=>{let n=Math.sin(e),s=Math.cos(e);return{x:s*t.x-n*t.y,y:n*t.x+s*t.y}},e.eq=(t,e)=>t.x===e.x&&t.y===e.y,e.rad=t=>Math.atan2(t.y,t.x),e.cpy=t=>e(t),e.map=(t,e)=>({x:e(t.x,"x"),y:e(t.y,"y")}),e.str=(t,e=", ")=>`${t.x}${e}${t.y}`;const n=(t=4,e=4,n=[])=>({m:t,n:e,entries:n.concat(Array(t*e).fill(0)).slice(0,t*e)});n.identity=t=>n(t,t,Array(t*t).fill(0).map(((e,n)=>+(Math.floor(n/t)===n%t)))),n.get=(t,e,n)=>t.entries[n-1+(e-1)*t.n],n.set=(t,e,n,s)=>{t.entries[n-1+(e-1)*t.n]=s},n.row=(t,e)=>{const n=(e-1)*t.n;return t.entries.slice(n,n+t.n)},n.col=(t,e)=>Array.times((s=>n.get(t,s+1,e)),t.m),n.add=(t,e)=>t.m===e.m&&t.n===e.n&&n.map(t,((t,n)=>t+e.entries[n])),n.sub=(t,e)=>t.m===e.m&&t.n===e.n&&n.map(t,((t,n)=>t-e.entries[n])),n.mul=(t,e)=>{if(t.n!==e.m)return!1;const s=n(t.m,e.n);for(let i=1;i<=t.m;i++)for(let a=1;a<=e.n;a++)n.set(s,i,a,Math.dot(n.row(t,i),n.col(e,a)));return s},n.scale=(t,e)=>n.map(t,(t=>t*e)),n.trans=t=>n(t.n,t.m,Array.times((e=>n.col(t,e+1)),t.n).flat()),n.minor=(t,e,s)=>{if(t.m!==t.n)return!1;const i=[];for(let a=1;a<=t.m;a++)if(a!==e)for(let e=1;e<=t.n;e++)e!==s&&i.push(n.get(t,a,e));return n(t.m-1,t.n-1,i)},n.det=t=>{if(t.m!==t.n)return!1;if(1===t.m)return t.entries[0];if(2===t.m)return t.entries[0]*t.entries[3]-t.entries[1]*t.entries[2];let e=0,s=1;for(let i=1;i<=t.n;i++)e+=s*t.entries[i-1]*n.det(n.minor(t,1,i)),s*=-1;return e},n.nor=t=>{if(t.m!==t.n)return!1;const e=n.det(t);return n.map(t,(t=>t*e))},n.adj=t=>{const e=n(t.m,t.n);for(let s=1;s<=t.m;s++)for(let i=1;i<=t.n;i++)n.set(e,s,i,n.det(n.minor(t,s,i)));const s=n.map(e,((t,e)=>t*(e%2?-1:1)));return n.trans(s)},n.inv=t=>{if(t.m!==t.n)return!1;const e=n.det(t);return 0!==e&&n.scale(n.adj(t),1/e)},n.eq=(t,e)=>t.m===e.m&&t.n===e.n&&n.str(t)===n.str(e),n.cpy=t=>n(t.m,t.n,[...t.entries]),n.map=(t,e)=>n(t.m,t.n,t.entries.map(e)),n.str=(t,e=", ",n="\n")=>t.entries.chunk(t.n).map((t=>t.join(e))).join(n),t.exports={vec:e,mat:n}},221:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(295),i=n(269),a=n(318),r=n(612);e.default=class{constructor(t){if(null===t)throw new Error("A valid container element must be specified.");this.container=t,this.application=new s.Application({backgroundColor:0,antialias:!1,resolution:(window.devicePixelRatio||1)*i.scaleFactor}),s.settings.SCALE_MODE=s.SCALE_MODES.NEAREST,s.settings.ROUND_PIXELS=!0,this.container.appendChild(this.application.view),window.addEventListener("resize",this.resize.bind(this),!1),this.resize(),this.stateManager=new a.default(this)}resize(){this.application.renderer.resize(Math.floor(window.innerWidth/i.scaleFactor),Math.floor(window.innerHeight/i.scaleFactor))}initialise(){this.stateManager.push(new r.TestState1),this.application.ticker.add((t=>{this.update(t*s.settings.TARGET_FPMS),this.draw()}))}update(t){this.stateManager.update(t)}draw(){this.stateManager.draw()}}},107:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.State=void 0;const s=n(295),i=n(900);e.State=class{constructor(t={}){this.transitionType=i.StateTransitionType.None,this.transitionAmount=0,this.transitionTime=0,this.defaultOptions={transitionTime:4,transparent:!1};const e=Object.assign({},this.defaultOptions,t);this.transitionTime=e.transitionTime,this.transparent=e.transparent,this.container=new s.Container}initialise(){}dispose(){}update(t){}draw(){}}},318:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(900);e.default=class{constructor(t){this.game=t,this.states=[]}push(t){return this.states.push(t),t.stateManager=this,this.game.application.stage.addChild(t.container),t.initialise(),t.transitionType=s.StateTransitionType.In,t.transitionAmount=0,t}pop(){if(this.states.length>0){let t=this.states.length-1;for(;t>0&&this.states[t].transitionType===s.StateTransitionType.Out;)t--;if(t>=0){const e=this.states[t];return e.transitionType=s.StateTransitionType.Out,e.transitionAmount=0,e}}return null}clear(){this.states.forEach((t=>{t.transitionType!==s.StateTransitionType.Out&&(t.transitionType=s.StateTransitionType.Out,t.transitionAmount=0)}))}update(t){if(this.states.length){for(var e=this.states.length;e--;)if(this.states[e].transitionType!==s.StateTransitionType.Out){this.states[e].update(t);break}this.states.forEach(((e,n)=>{const i=t/e.transitionTime;e.transitionAmount<1?e.transitionAmount=Math.clamp(e.transitionAmount+i):e.transitionType===s.StateTransitionType.Out&&(e.dispose(),this.states.splice(n,1),this.game.application.stage.removeChild(e.container))}))}}draw(){}}},766:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(295),i=n(44);e.default=class{constructor(t,e){this.position=e,this.sprite=s.Sprite.from("../images/error.png"),this.sprite.anchor.set(.5),this.sprite.position.set(...i.vec.components(this.position)),t.container.addChild(this.sprite)}update(t){}}},612:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TestState2=e.TestState1=void 0;const s=n(107),i=n(44),a=n(766),r=n(295),o=n(900);class h extends s.State{constructor(t={}){super(t),this.timeout=10;const e=new r.Loader,n=this;e.add("testfont","fonts/retro_gaming.xml").load((()=>{n.testText=new r.BitmapText("Hello, world!",{fontName:"RetroGaming",tint:16777215}),n.testText.position.set(30,40),n.container.addChild(n.testText)}))}update(t){this.timeout-=t,this.timeout<=0&&(this.stateManager.pop(),this.stateManager.push(new l));let e="none";this.transitionType===o.StateTransitionType.In?e="in":this.transitionType===o.StateTransitionType.Out&&(e="out"),this.testText&&(this.testText.text=`${e}: ${this.transitionAmount}`)}}e.TestState1=h;class l extends s.State{constructor(t={}){super(t),this.testObjects=[];const e=new r.Loader,n=this;e.add("testfont","fonts/retro_gaming.xml").load((()=>{n.testText=new r.BitmapText("Hello, world!",{fontName:"RetroGaming",tint:16776960}),n.testText.position.set(30,70),n.container.addChild(n.testText)}))}initialise(){super.initialise(),this.testObjects.push(new a.default(this,i.vec(50,50)))}update(t){let e="none";this.transitionType===o.StateTransitionType.In?e="in":this.transitionType===o.StateTransitionType.Out&&(e="out"),this.testText&&(this.testText.text=`${e}: ${this.transitionAmount}`)}}e.TestState2=l},900:(t,e)=>{"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.StateTransitionType=void 0,(n=e.StateTransitionType||(e.StateTransitionType={}))[n.In=0]="In",n[n.Out=1]="Out",n[n.None=2]="None"},607:(t,e,n)=>{"use strict";const s=n(221);window.onload=()=>{new s.default(document.querySelector("#main-container")).initialise()}},269:t=>{"use strict";t.exports=JSON.parse('{"title":"Test Game","scaleFactor":2}')},295:t=>{"use strict";t.exports=PIXI}},e={};!function n(s){if(e[s])return e[s].exports;var i=e[s]={exports:{}};return t[s](i,i.exports,n),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,