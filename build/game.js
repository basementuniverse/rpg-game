(()=>{var t={44:t=>{Math.floatEquals=(t,e,a=Number.EPSILON)=>Math.abs(t-e)<a,Math.clamp=(t,e=0,a=1)=>t<e?e:t>a?a:t,Math.frac=t=>t>=0?t-Math.floor(t):t-Math.ceil(t),Math.lerp=(t,e,a)=>t+(e-t)*a,Math.unlerp=(t,e,a)=>(a-t)/(e-t),Math.blerp=(t,e,a,r,n,s)=>Math.lerp(Math.lerp(t,e,n),Math.lerp(a,r,n),s),Math.remap=(t,e,a,r,n)=>r+(t-e)*(n-r)/(a-e),Math.smoothstep=(t,e,a)=>Math.lerp(t,e,3*Math.pow(a,2)-2*Math.pow(a,3)),Math.radians=t=>Math.PI/180*t,Math.degrees=t=>180/Math.PI*t,Math.randomBetween=(t,e)=>Math.random()*(e-t)+t,Math.randomIntBetween=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,Math.cltRandom=(t=.5,e=.5,a=2)=>{let r=0;for(let t=a;t--;)r+=Math.random();return t+(r-a/2)/(a/2)*e},Math.cltRandomInt=(t,e)=>Math.floor(t+Math.cltRandom(.5,.5,2)*(e+1-t)),Math.weightedRandom=t=>{let e=t.reduce(((t,e)=>t+e),0),a=0;const r=Math.random()*e;for(;e>r;)e-=t[a++];return a-1},Math.lerpArray=(t,e,a=Math.lerp)=>{const r=e*(t.length-1),n=Math.clamp(Math.trunc(r),0,t.length-1);return a(t[n]||0,t[n+1]||0,Math.frac(r))},Math.dot=(t,e)=>t.reduce(((t,a,r)=>t+a*e[r]),0),Array.times=(t,e)=>Array(e).fill(0).map(((e,a)=>t(a))),Array.range=t=>Array.times((t=>t),t),Object.defineProperty(Array.prototype,"at",{value:function(t){const e=this.length;return this[t<0?e-Math.abs(t+1)%e-1:t%e]}}),Object.defineProperty(Array.prototype,"chunk",{value:function(t){return Array.times((e=>this.slice(e*t,e*t+t)),Math.ceil(this.length/t))}}),Object.defineProperty(Array.prototype,"shuffle",{value:function(){return this.map((t=>[Math.random(),t])).sort(((t,e)=>t[0]-e[0])).map((t=>t[1]))}});const e=(t,e)=>t||e?"object"==typeof t?{x:t.x||0,y:t.y||0}:null==e?{x:t,y:t}:{x:t,y:e}:{x:0,y:0};e.components=t=>[t.x,t.y],e.ux=()=>e(1,0),e.uy=()=>e(0,1),e.add=(t,e)=>({x:t.x+e.x,y:t.y+e.y}),e.mul=(t,e)=>({x:t.x*e,y:t.y*e}),e.sub=(t,e)=>({x:t.x-e.x,y:t.y-e.y}),e.len=t=>Math.sqrt(t.x*t.x+t.y*t.y),e.manhattan=t=>Math.abs(t.x)+Math.abs(t.y),e.nor=t=>{let a=e.len(t);return a?{x:t.x/a,y:t.y/a}:e()},e.dot=(t,e)=>t.x*e.x+t.y*e.y,e.rot=(t,e)=>{let a=Math.sin(e),r=Math.cos(e);return{x:r*t.x-a*t.y,y:a*t.x+r*t.y}},e.eq=(t,e)=>t.x===e.x&&t.y===e.y,e.rad=t=>Math.atan2(t.y,t.x),e.cpy=t=>e(t),e.map=(t,e)=>({x:e(t.x,"x"),y:e(t.y,"y")}),e.str=(t,e=", ")=>`${t.x}${e}${t.y}`;const a=(t=4,e=4,a=[])=>({m:t,n:e,entries:a.concat(Array(t*e).fill(0)).slice(0,t*e)});a.identity=t=>a(t,t,Array(t*t).fill(0).map(((e,a)=>+(Math.floor(a/t)===a%t)))),a.get=(t,e,a)=>t.entries[a-1+(e-1)*t.n],a.set=(t,e,a,r)=>{t.entries[a-1+(e-1)*t.n]=r},a.row=(t,e)=>{const a=(e-1)*t.n;return t.entries.slice(a,a+t.n)},a.col=(t,e)=>Array.times((r=>a.get(t,r+1,e)),t.m),a.add=(t,e)=>t.m===e.m&&t.n===e.n&&a.map(t,((t,a)=>t+e.entries[a])),a.sub=(t,e)=>t.m===e.m&&t.n===e.n&&a.map(t,((t,a)=>t-e.entries[a])),a.mul=(t,e)=>{if(t.n!==e.m)return!1;const r=a(t.m,e.n);for(let n=1;n<=t.m;n++)for(let s=1;s<=e.n;s++)a.set(r,n,s,Math.dot(a.row(t,n),a.col(e,s)));return r},a.scale=(t,e)=>a.map(t,(t=>t*e)),a.trans=t=>a(t.n,t.m,Array.times((e=>a.col(t,e+1)),t.n).flat()),a.minor=(t,e,r)=>{if(t.m!==t.n)return!1;const n=[];for(let s=1;s<=t.m;s++)if(s!==e)for(let e=1;e<=t.n;e++)e!==r&&n.push(a.get(t,s,e));return a(t.m-1,t.n-1,n)},a.det=t=>{if(t.m!==t.n)return!1;if(1===t.m)return t.entries[0];if(2===t.m)return t.entries[0]*t.entries[3]-t.entries[1]*t.entries[2];let e=0,r=1;for(let n=1;n<=t.n;n++)e+=r*t.entries[n-1]*a.det(a.minor(t,1,n)),r*=-1;return e},a.nor=t=>{if(t.m!==t.n)return!1;const e=a.det(t);return a.map(t,(t=>t*e))},a.adj=t=>{const e=a(t.m,t.n);for(let r=1;r<=t.m;r++)for(let n=1;n<=t.n;n++)a.set(e,r,n,a.det(a.minor(t,r,n)));const r=a.map(e,((t,e)=>t*(e%2?-1:1)));return a.trans(r)},a.inv=t=>{if(t.m!==t.n)return!1;const e=a.det(t);return 0!==e&&a.scale(a.adj(t),1/e)},a.eq=(t,e)=>t.m===e.m&&t.n===e.n&&a.str(t)===a.str(e),a.cpy=t=>a(t.m,t.n,[...t.entries]),a.map=(t,e)=>a(t.m,t.n,t.entries.map(e)),a.str=(t,e=", ",a="\n")=>t.entries.chunk(t.n).map((t=>t.join(e))).join(a),t.exports={vec:e,mat:a}},76:(t,e,a)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=a(44),n=a(269);class s{constructor(t={}){this.defaultOptions={margin:10,padding:4,font:"10pt Lucida Console, monospace",lineHeight:12,foregroundColour:"#fff",backgroundColour:"#3338",defaultValue:{align:"left",showLabel:!0},defaultMarker:{showLabel:!0,showValue:!0,showMarker:!0,markerSize:6,markerStyle:"x",markerColour:"#ccc",space:"world",labelOffset:r.vec(10)}},this.options=Object.assign({},this.defaultOptions,t),this.values=new Map,this.markers=new Map}static initialise(t={}){s.instance=new s(t)}static getInstance(){return null==s.instance&&s.initialise(),s.instance}static value(t,e,a={}){const r=s.getInstance();r.values.set(t,Object.assign({label:t,value:e},r.defaultOptions.defaultValue,a))}static marker(t,e,a,r={}){const n=s.getInstance();n.markers.set(t,Object.assign({label:t,value:e,position:a},n.defaultOptions.defaultMarker,r))}static draw(t,e){const a=s.getInstance();let n;t.save(),a.markers.forEach((e=>{"world"===e.space&&a.drawMarker(t,e)})),t.setTransform(1,0,0,1,0,0);let o=a.options.margin,i=a.options.margin;const l=a.options.lineHeight+2*a.options.padding;a.values.forEach((s=>{var h,c,u,m;switch(s.align){case"left":n=r.vec(a.options.margin,o),o+=l;break;case"right":n=r.vec(e-a.options.margin,i),i+=l}a.drawLabel(t,(s.showLabel?s.label+": ":"")+s.value,n,s.align,null!==(h=s.padding)&&void 0!==h?h:a.options.padding,null!==(c=s.font)&&void 0!==c?c:a.options.font,null!==(u=s.foregroundColour)&&void 0!==u?u:a.options.foregroundColour,null!==(m=s.backgroundColour)&&void 0!==m?m:a.options.backgroundColour)})),a.markers.forEach((e=>{"screen"===e.space&&a.drawMarker(t,e)})),a.values.clear(),a.markers.clear(),t.restore()}drawMarker(t,e){var a,s,o,i,l;t.save(),"world"===e.space&&t.scale(1/n.scaleFactor,1/n.scaleFactor);const h=r.vec.mul(null!==(a=e.position)&&void 0!==a?a:r.vec(),n.scaleFactor);if((e.showLabel||e.showValue)&&this.drawLabel(t,(e.showLabel?e.label+": ":"")+(e.showValue?""+e.value:""),r.vec.add(null!=h?h:r.vec(),e.labelOffset),"left",null!==(s=e.padding)&&void 0!==s?s:this.options.padding,null!==(o=e.font)&&void 0!==o?o:this.options.font,null!==(i=e.foregroundColour)&&void 0!==i?i:this.options.foregroundColour,null!==(l=e.backgroundColour)&&void 0!==l?l:this.options.backgroundColour),e.showMarker)switch(t.lineWidth=2,t.strokeStyle=t.fillStyle=e.markerColour,e.markerStyle){case"x":this.drawCross(t,h,e.markerSize);break;case"+":this.drawPlus(t,h,e.markerSize);break;case".":this.drawDot(t,h,e.markerSize)}t.restore()}drawLabel(t,e,a,r,n,s,o,i){t.save(),t.font=s,t.textBaseline="top";const l={width:t.measureText(e).width+2*n,height:this.options.lineHeight+2*n},h="right"===r?a.x-l.width:a.x;t.fillStyle=i,t.fillRect(h-n,a.y-n,l.width,l.height),t.fillStyle=o,t.fillText(e,h,a.y),t.restore()}drawCross(t,e,a){t.beginPath();const r=a/2;t.moveTo(e.x-r,e.y-r),t.lineTo(e.x+r,e.y+r),t.moveTo(e.x-r,e.y+r),t.lineTo(e.x+r,e.y-r),t.stroke()}drawPlus(t,e,a){t.beginPath();const r=a/2;t.moveTo(e.x,e.y-r),t.lineTo(e.x,e.y+r),t.moveTo(e.x-r,e.y),t.lineTo(e.x+r,e.y),t.stroke()}drawDot(t,e,a){t.beginPath(),t.arc(e.x,e.y,a/2,0,2*Math.PI),t.fill()}}e.default=s},221:(t,e,a)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=a(269),n=a(601),s=a(76),o=a(44);e.default=class{constructor(t){if(this.frameRate=0,this.frameCount=0,this.testOffset=0,this.testTime=0,null===t)throw new Error("A valid container element must be specified.");if("canvas"!==t.tagName.toLowerCase())throw new Error("Container element must be a canvas.");this.canvas=t;const e=this.canvas.getContext("2d");if(null===e)throw new Error("Couldn't get a 2d context.");this.context=e,window.addEventListener("resize",this.resize.bind(this),!1),this.resize(),s.default.initialise()}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context.imageSmoothingEnabled=!1}initialise(){this.testImage=new Image,this.testImage.src="../images/error.png",this.lastFrameTime=this.lastFrameCountTime=performance.now(),this.loop()}loop(){const t=performance.now(),e=Math.min(t-this.lastFrameTime,n.FPS_MIN);t-this.lastFrameCountTime>=1e3&&(this.lastFrameCountTime=t,this.frameRate=this.frameCount,this.frameCount=0),this.frameCount++,this.lastFrameTime=t,r.showFPS&&s.default.value("FPS",this.frameRate),this.update(e),this.draw(),window.requestAnimationFrame(this.loop.bind(this))}update(t){this.testTime+=t,this.testOffset=100*Math.sin(this.testTime/10),s.default.marker("world",this.testTime,o.vec(30,30)),s.default.marker("screen","hello!",o.vec(100,100),{showLabel:!1,space:"screen",markerStyle:"+"}),s.default.marker("screen2","hello2!",o.vec(100,130),{space:"screen",markerStyle:"."})}draw(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.setTransform(r.scaleFactor,0,0,r.scaleFactor,100+this.testOffset,100),this.context.drawImage(this.testImage,0,0),s.default.draw(this.context,this.canvas.width)}}},601:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FPS_MIN=void 0,e.FPS_MIN=1/30},607:(t,e,a)=>{"use strict";const r=a(221);window.onload=()=>{new r.default(document.querySelector("#game")).initialise()}},269:t=>{"use strict";t.exports=JSON.parse('{"title":"RPG Game","scaleFactor":2,"showFPS":true}')}},e={};!function a(r){if(e[r])return e[r].exports;var n=e[r]={exports:{}};return t[r](n,n.exports,a),n.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,