(()=>{var t={578:t=>{"use strict";t.exports=JSON.parse('{"items":[{"name":"logo","type":"image","args":["images/logo.png"]},{"name":"testfont","type":"font","args":["fonts/aniron.ttf"]},{"name":"testdata1","type":"json","args":["json/testdata1.json"]},{"name":"testdata2","type":"json","args":["json/testdata2.json"]},{"name":"testdata3","type":"json","args":["json/testdata3.json"]},{"name":"testsound","type":"audio","args":["sounds/blip1.wav"]}]}')},44:t=>{Math.floatEquals=(t,e,n=Number.EPSILON)=>Math.abs(t-e)<n,Math.clamp=(t,e=0,n=1)=>t<e?e:t>n?n:t,Math.frac=t=>t>=0?t-Math.floor(t):t-Math.ceil(t),Math.lerp=(t,e,n)=>t+(e-t)*n,Math.unlerp=(t,e,n)=>(n-t)/(e-t),Math.blerp=(t,e,n,a,r,o)=>Math.lerp(Math.lerp(t,e,r),Math.lerp(n,a,r),o),Math.remap=(t,e,n,a,r)=>a+(t-e)*(r-a)/(n-e),Math.smoothstep=(t,e,n)=>Math.lerp(t,e,3*Math.pow(n,2)-2*Math.pow(n,3)),Math.radians=t=>Math.PI/180*t,Math.degrees=t=>180/Math.PI*t,Math.randomBetween=(t,e)=>Math.random()*(e-t)+t,Math.randomIntBetween=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,Math.cltRandom=(t=.5,e=.5,n=2)=>{let a=0;for(let t=n;t--;)a+=Math.random();return t+(a-n/2)/(n/2)*e},Math.cltRandomInt=(t,e)=>Math.floor(t+Math.cltRandom(.5,.5,2)*(e+1-t)),Math.weightedRandom=t=>{let e=t.reduce(((t,e)=>t+e),0),n=0;const a=Math.random()*e;for(;e>a;)e-=t[n++];return n-1},Math.lerpArray=(t,e,n=Math.lerp)=>{const a=e*(t.length-1),r=Math.clamp(Math.trunc(a),0,t.length-1);return n(t[r]||0,t[r+1]||0,Math.frac(a))},Math.dot=(t,e)=>t.reduce(((t,n,a)=>t+n*e[a]),0),Math.factorial=t=>{let e=1;for(let n=2;n<=t;n++)e*=n;return e},Math.permutation=(t,e)=>Math.factorial(t)/Math.factorial(t-e),Math.combination=(t,e)=>Math.factorial(t)/(Math.factorial(e)*Math.factorial(t-e)),Array.times=(t,e)=>Array(e).fill(0).map(((e,n)=>t(n))),Array.range=t=>Array.times((t=>t),t),Object.defineProperty(Array.prototype,"at",{value:function(t){const e=this.length;return this[t<0?e-Math.abs(t+1)%e-1:t%e]}}),Object.defineProperty(Array.prototype,"chunk",{value:function(t){return Array.times((e=>this.slice(e*t,e*t+t)),Math.ceil(this.length/t))}}),Object.defineProperty(Array.prototype,"shuffle",{value:function(){return this.map((t=>[Math.random(),t])).sort(((t,e)=>t[0]-e[0])).map((t=>t[1]))}});const e=(t,e)=>t||e?"object"==typeof t?{x:t.x||0,y:t.y||0}:null==e?{x:t,y:t}:{x:t,y:e}:{x:0,y:0};e.components=t=>[t.x,t.y],e.ux=()=>e(1,0),e.uy=()=>e(0,1),e.add=(t,e)=>({x:t.x+e.x,y:t.y+e.y}),e.mul=(t,e)=>({x:t.x*e,y:t.y*e}),e.sub=(t,e)=>({x:t.x-e.x,y:t.y-e.y}),e.len=t=>Math.sqrt(t.x*t.x+t.y*t.y),e.manhattan=t=>Math.abs(t.x)+Math.abs(t.y),e.nor=t=>{let n=e.len(t);return n?{x:t.x/n,y:t.y/n}:e()},e.dot=(t,e)=>t.x*e.x+t.y*e.y,e.rot=(t,e)=>{let n=Math.sin(e),a=Math.cos(e);return{x:a*t.x-n*t.y,y:n*t.x+a*t.y}},e.eq=(t,e)=>t.x===e.x&&t.y===e.y,e.rad=t=>Math.atan2(t.y,t.x),e.cpy=t=>e(t),e.map=(t,e)=>({x:e(t.x,"x"),y:e(t.y,"y")}),e.str=(t,e=", ")=>`${t.x}${e}${t.y}`;const n=(t=4,e=4,n=[])=>({m:t,n:e,entries:n.concat(Array(t*e).fill(0)).slice(0,t*e)});n.identity=t=>n(t,t,Array(t*t).fill(0).map(((e,n)=>+(Math.floor(n/t)===n%t)))),n.get=(t,e,n)=>t.entries[n-1+(e-1)*t.n],n.set=(t,e,n,a)=>{t.entries[n-1+(e-1)*t.n]=a},n.row=(t,e)=>{const n=(e-1)*t.n;return t.entries.slice(n,n+t.n)},n.col=(t,e)=>Array.times((a=>n.get(t,a+1,e)),t.m),n.add=(t,e)=>t.m===e.m&&t.n===e.n&&n.map(t,((t,n)=>t+e.entries[n])),n.sub=(t,e)=>t.m===e.m&&t.n===e.n&&n.map(t,((t,n)=>t-e.entries[n])),n.mul=(t,e)=>{if(t.n!==e.m)return!1;const a=n(t.m,e.n);for(let r=1;r<=t.m;r++)for(let o=1;o<=e.n;o++)n.set(a,r,o,Math.dot(n.row(t,r),n.col(e,o)));return a},n.scale=(t,e)=>n.map(t,(t=>t*e)),n.trans=t=>n(t.n,t.m,Array.times((e=>n.col(t,e+1)),t.n).flat()),n.minor=(t,e,a)=>{if(t.m!==t.n)return!1;const r=[];for(let o=1;o<=t.m;o++)if(o!==e)for(let e=1;e<=t.n;e++)e!==a&&r.push(n.get(t,o,e));return n(t.m-1,t.n-1,r)},n.det=t=>{if(t.m!==t.n)return!1;if(1===t.m)return t.entries[0];if(2===t.m)return t.entries[0]*t.entries[3]-t.entries[1]*t.entries[2];let e=0,a=1;for(let r=1;r<=t.n;r++)e+=a*t.entries[r-1]*n.det(n.minor(t,1,r)),a*=-1;return e},n.nor=t=>{if(t.m!==t.n)return!1;const e=n.det(t);return n.map(t,(t=>t*e))},n.adj=t=>{const e=n(t.m,t.n);for(let a=1;a<=t.m;a++)for(let r=1;r<=t.n;r++)n.set(e,a,r,n.det(n.minor(t,a,r)));const a=n.map(e,((t,e)=>t*(e%2?-1:1)));return n.trans(a)},n.inv=t=>{if(t.m!==t.n)return!1;const e=n.det(t);return 0!==e&&n.scale(n.adj(t),1/e)},n.eq=(t,e)=>t.m===e.m&&t.n===e.n&&n.str(t)===n.str(e),n.cpy=t=>n(t.m,t.n,[...t.entries]),n.map=(t,e)=>n(t.m,t.n,t.entries.map(e)),n.str=(t,e=", ",n="\n")=>t.entries.chunk(t.n).map((t=>t.join(e))).join(n),t.exports={vec:e,mat:n}},76:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const a=n(44),r=n(269);class o{constructor(t={}){this.defaultOptions={margin:10,padding:4,font:"10pt Lucida Console, monospace",lineHeight:12,foregroundColour:"#fff",backgroundColour:"#3338",defaultValue:{align:"left",showLabel:!0},defaultMarker:{showLabel:!0,showValue:!0,showMarker:!0,markerSize:6,markerStyle:"x",markerColour:"#ccc",space:"world",labelOffset:a.vec(10)}},this.options=Object.assign({},this.defaultOptions,t),this.values=new Map,this.markers=new Map}static initialise(t={}){o.instance=new o(t)}static getInstance(){return null==o.instance&&o.initialise(),o.instance}static value(t,e,n={}){const a=o.getInstance();a.values.set(t,Object.assign({label:t,value:e},a.defaultOptions.defaultValue,n))}static marker(t,e,n,a={}){const r=o.getInstance();r.markers.set(t,Object.assign({label:t,value:e,position:n},r.defaultOptions.defaultMarker,a))}static draw(t){const e=o.getInstance();let n;t.save(),t.scale(1/r.scaleFactor,1/r.scaleFactor),e.markers.forEach((n=>{"world"===n.space&&e.drawMarker(t,n)})),t.restore(),t.save(),t.setTransform(1,0,0,1,0,0);let s=e.options.margin,i=e.options.margin;const l=e.options.lineHeight+2*e.options.padding;e.values.forEach((r=>{var o,u,c,d;switch(r.align){case"left":n=a.vec(e.options.margin,s),s+=l;break;case"right":n=a.vec(t.canvas.clientWidth-e.options.margin,i),i+=l}e.drawLabel(t,(r.showLabel?r.label+": ":"")+r.value,n,r.align,null!==(o=r.padding)&&void 0!==o?o:e.options.padding,null!==(u=r.font)&&void 0!==u?u:e.options.font,null!==(c=r.foregroundColour)&&void 0!==c?c:e.options.foregroundColour,null!==(d=r.backgroundColour)&&void 0!==d?d:e.options.backgroundColour)})),e.markers.forEach((n=>{"screen"===n.space&&e.drawMarker(t,n)})),t.restore(),e.values.clear(),e.markers.clear()}drawMarker(t,e){var n,o,s,i,l;t.save();const u=a.vec.mul(null!==(n=e.position)&&void 0!==n?n:a.vec(),r.scaleFactor);if((e.showLabel||e.showValue)&&this.drawLabel(t,(e.showLabel?e.label+": ":"")+(e.showValue?""+e.value:""),a.vec.add(null!=u?u:a.vec(),e.labelOffset),"left",null!==(o=e.padding)&&void 0!==o?o:this.options.padding,null!==(s=e.font)&&void 0!==s?s:this.options.font,null!==(i=e.foregroundColour)&&void 0!==i?i:this.options.foregroundColour,null!==(l=e.backgroundColour)&&void 0!==l?l:this.options.backgroundColour),e.showMarker)switch(t.lineWidth=2,t.strokeStyle=t.fillStyle=e.markerColour,e.markerStyle){case"x":this.drawCross(t,u,e.markerSize);break;case"+":this.drawPlus(t,u,e.markerSize);break;case".":this.drawDot(t,u,e.markerSize)}t.restore()}drawLabel(t,e,n,a,r,o,s,i){t.save(),t.font=o,t.textBaseline="top";const l={width:t.measureText(e).width+2*r,height:this.options.lineHeight+2*r},u="right"===a?n.x-l.width:n.x;t.fillStyle=i,t.fillRect(u-r,n.y-r,l.width,l.height),t.fillStyle=s,t.fillText(e,u,n.y),t.restore()}drawCross(t,e,n){t.beginPath();const a=n/2;t.moveTo(e.x-a,e.y-a),t.lineTo(e.x+a,e.y+a),t.moveTo(e.x-a,e.y+a),t.lineTo(e.x+a,e.y-a),t.stroke()}drawPlus(t,e,n){t.beginPath();const a=n/2;t.moveTo(e.x,e.y-a),t.lineTo(e.x,e.y+a),t.moveTo(e.x-a,e.y),t.lineTo(e.x+a,e.y),t.stroke()}drawDot(t,e,n){t.beginPath(),t.arc(e.x,e.y,n/2,0,2*Math.PI),t.fill()}}e.default=o},221:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const a=n(269),r=n(601),o=n(76),s=n(187);e.default=class{constructor(t){if(this.frameRate=0,this.frameCount=0,null===t)throw new Error("A valid container element must be specified.");if("canvas"!==t.tagName.toLowerCase())throw new Error("Container element must be a canvas.");this.canvas=t;const e=this.canvas.getContext("2d");if(null===e)throw new Error("Couldn't get a 2d context.");this.context=e,window.addEventListener("resize",this.resize.bind(this),!1),this.resize()}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context.imageSmoothingEnabled=!1}initialise(){o.default.initialise(),s.ContentManager.initialise(),s.InputManager.initialise(this.canvas),s.StateManager.initialise(),this.lastFrameTime=this.lastFrameCountTime=performance.now(),this.loop()}loop(){const t=performance.now(),e=Math.min(t-this.lastFrameTime,r.FPS_MIN);t-this.lastFrameCountTime>=1e3&&(this.lastFrameCountTime=t,this.frameRate=this.frameCount,this.frameCount=0),this.frameCount++,this.lastFrameTime=t,a.showFPS&&o.default.value("FPS",this.frameRate,{align:"right"}),this.update(e),this.draw(),window.requestAnimationFrame(this.loop.bind(this))}update(t){s.StateManager.update(t),s.InputManager.update()}draw(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.setTransform(a.scaleFactor,0,0,a.scaleFactor,0,0),s.StateManager.draw(this.context),o.default.draw(this.context)}}},601:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FPS_MIN=void 0,e.FPS_MIN=1/30},900:(t,e)=>{"use strict";var n,a;Object.defineProperty(e,"__esModule",{value:!0}),e.Key=e.StateTransitionType=void 0,(a=e.StateTransitionType||(e.StateTransitionType={}))[a.In=0]="In",a[a.Out=1]="Out",a[a.None=2]="None",(n=e.Key||(e.Key={})).Up="ArrowUp",n.Down="ArrowDown",n.Left="ArrowLeft",n.Right="ArrowRight"},607:function(t,e,n){"use strict";var a=this&&this.__awaiter||function(t,e,n,a){return new(n||(n=Promise))((function(r,o){function s(t){try{l(a.next(t))}catch(t){o(t)}}function i(t){try{l(a.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,i)}l((a=a.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const r=n(221);window.onload=()=>a(void 0,void 0,void 0,(function*(){const t=new r.default(document.querySelector("#game"));yield t.initialise()}))},570:function(t,e,n){"use strict";var a=this&&this.__awaiter||function(t,e,n,a){return new(n||(n=Promise))((function(r,o){function s(t){try{l(a.next(t))}catch(t){o(t)}}function i(t){try{l(a.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,i)}l((a=a.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.ContentManager=void 0;const r=n(578),o=n(5),s={image:t=>a(void 0,void 0,void 0,(function*(){throw yield o.sleep(1e3),new Error(`loading image "${t}"...`)})),sound:t=>a(void 0,void 0,void 0,(function*(){throw yield o.sleep(1e3),new Error(`loading audio "${t}"...`)})),font:t=>a(void 0,void 0,void 0,(function*(){throw yield o.sleep(1e3),new Error(`loading font "${t}"...`)})),json:t=>a(void 0,void 0,void 0,(function*(){throw yield o.sleep(1e3),new Error(`loading json "${t}"...`)}))};class i{constructor(t){this.content=t}static initialise(){i.instance=new i(r.items),console.log(r)}static getInstance(){if(void 0===i.instance)throw new Error("Content manager not properly initialised");return i.instance}static load(){return a(this,void 0,void 0,(function*(){if(i.loaded)throw new Error("Content already loaded");const t=i.getInstance();if(0===t.content.length)throw new Error("No content items to load");const e=1/t.content.length,n=[];for(const a of t.content)n.push(yield s[a.type](...a.args)),i.progress=Math.clamp(i.progress+e,0,1);t.items=n,i.loaded=!0}))}static get(t){if(!i.loaded)throw new Error("Content not loaded");const e=i.getInstance();if(!(t in e.items))throw new Error(`Content item "${t}" not found`);return e.items[t]}}e.ContentManager=i,i.progress=0,i.loaded=!1},550:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EntityManager=void 0,e.EntityManager=class{}},357:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InputManager=void 0;const a=n(44);class r{constructor(t){this.keyboardState={},this.previousKeyboardState={},this.mouseState={button:!1,position:a.vec(),wheel:0},this.previousMouseState={button:!1,position:a.vec(),wheel:0},t.addEventListener("mousedown",(()=>{this.mouseState.button=!0})),t.addEventListener("mouseup",(()=>{this.mouseState.button=!1})),t.addEventListener("touchstart",(()=>{this.mouseState.button=!0})),t.addEventListener("touchend",(()=>{this.mouseState.button=!1})),t.addEventListener("mousemove",(t=>{this.mouseState.position.x=t.offsetX,this.mouseState.position.y=t.offsetY})),t.addEventListener("keydown",(t=>{this.keyboardState[t.code]=!0})),t.addEventListener("keyup",(t=>{this.keyboardState[t.code]=!1})),t.addEventListener("wheel",(t=>{this.mouseState.wheel=t.deltaY>0?1:-1}))}static initialise(t){r.instance=new r(t)}static getInstance(){if(void 0===r.instance)throw new Error("Input manager not properly initialised");return r.instance}static update(){const t=r.getInstance();t.previousKeyboardState=Object.assign({},t.keyboardState),t.previousMouseState={button:t.mouseState.button,position:a.vec.cpy(t.mouseState.position),wheel:0}}static keyDown(t){const e=r.getInstance();if(null==t){for(const t in e.keyboardState)if(e.keyboardState[t])return!0;return!1}return!!e.keyboardState[t]}static keyPressed(t){const e=r.getInstance();if(null==t){for(const t in e.keyboardState)if(e.keyboardState[t]&&(!(t in e.previousKeyboardState)||!e.previousKeyboardState[t]))return!0;return!1}return!!e.keyboardState[t]&&!e.previousKeyboardState[t]}static keyReleased(t){const e=r.getInstance();if(null==t){for(const t in e.keyboardState)if(!e.keyboardState[t]&&e.previousKeyboardState[t])return!0;return!1}return!e.keyboardState[t]&&!!e.previousKeyboardState[t]}static mouseDown(){return!!r.getInstance().mouseState.button}static mousePressed(){const t=r.getInstance();return!!t.mouseState.button&&!t.previousMouseState.button}static mouseReleased(){const t=r.getInstance();return!t.mouseState.button&&!!t.previousMouseState.button}static mouseWheelUp(){return r.getInstance().mouseState.wheel>0}static mouseWheelDown(){return r.getInstance().mouseState.wheel<0}static mousePosition(){return r.getInstance().mouseState.position}}e.InputManager=r},183:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StateManager=void 0;const a=n(900);class r{constructor(){this.states=[]}static initialise(){r.instance=new r}static getInstance(){if(void 0===r.instance)throw new Error("State manager not properly initialised");return r.instance}static push(t){return r.getInstance().states.push(t),t.initialise(),t.transitionIn(),t}static pop(){const t=r.getInstance();if(t.states.length>0){let e=t.states.length-1;for(;e>0&&t.states[e].transitionType===a.StateTransitionType.Out;)e--;if(e>=0){const n=t.states[e];return n.transitionOut(),n}}return null}static clear(){r.getInstance().states.forEach((t=>{t.transitionType!==a.StateTransitionType.Out&&t.transitionOut()}))}static update(t){const e=r.getInstance();if(e.states.length>0){for(let n=e.states.length;n--;)if(e.states[n].transitionType!==a.StateTransitionType.Out){e.states[n].update(t);break}e.states.forEach((e=>{e.updateTransition(t)})),e.states=e.states.filter((t=>!t.disposed))}}static draw(t){const e=r.getInstance();if(e.states.length>0){const n=[e.states[e.states.length-1]];let a=e.states.length-1;for(;a>0&&e.states[a].transparent;)n.push(e.states[--a]);for(let e=n.length;e--;)n[e].draw(t)}}}e.StateManager=r},187:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EntityManager=e.StateManager=e.InputManager=e.ContentManager=void 0;var a=n(570);Object.defineProperty(e,"ContentManager",{enumerable:!0,get:function(){return a.ContentManager}});var r=n(357);Object.defineProperty(e,"InputManager",{enumerable:!0,get:function(){return r.InputManager}});var o=n(183);Object.defineProperty(e,"StateManager",{enumerable:!0,get:function(){return o.StateManager}});var s=n(550);Object.defineProperty(e,"EntityManager",{enumerable:!0,get:function(){return s.EntityManager}})},5:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sleep=void 0,e.sleep=function(t){return new Promise((e=>setTimeout(e,t)))}},269:t=>{"use strict";t.exports=JSON.parse('{"title":"RPG Game","scaleFactor":2,"showFPS":true}')}},e={};!function n(a){if(e[a])return e[a].exports;var r=e[a]={exports:{}};return t[a].call(r.exports,r,r.exports,n),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,