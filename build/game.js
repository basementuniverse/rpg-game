(()=>{var t={44:t=>{Math.floatEquals=(t,e,a=Number.EPSILON)=>Math.abs(t-e)<a,Math.clamp=(t,e=0,a=1)=>t<e?e:t>a?a:t,Math.frac=t=>t>=0?t-Math.floor(t):t-Math.ceil(t),Math.lerp=(t,e,a)=>t+(e-t)*a,Math.unlerp=(t,e,a)=>(a-t)/(e-t),Math.blerp=(t,e,a,s,r,n)=>Math.lerp(Math.lerp(t,e,r),Math.lerp(a,s,r),n),Math.remap=(t,e,a,s,r)=>s+(t-e)*(r-s)/(a-e),Math.smoothstep=(t,e,a)=>Math.lerp(t,e,3*Math.pow(a,2)-2*Math.pow(a,3)),Math.radians=t=>Math.PI/180*t,Math.degrees=t=>180/Math.PI*t,Math.randomBetween=(t,e)=>Math.random()*(e-t)+t,Math.randomIntBetween=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,Math.cltRandom=(t=.5,e=.5,a=2)=>{let s=0;for(let t=a;t--;)s+=Math.random();return t+(s-a/2)/(a/2)*e},Math.cltRandomInt=(t,e)=>Math.floor(t+Math.cltRandom(.5,.5,2)*(e+1-t)),Math.weightedRandom=t=>{let e=t.reduce(((t,e)=>t+e),0),a=0;const s=Math.random()*e;for(;e>s;)e-=t[a++];return a-1},Math.lerpArray=(t,e,a=Math.lerp)=>{const s=e*(t.length-1),r=Math.clamp(Math.trunc(s),0,t.length-1);return a(t[r]||0,t[r+1]||0,Math.frac(s))},Math.dot=(t,e)=>t.reduce(((t,a,s)=>t+a*e[s]),0),Math.factorial=t=>{let e=1;for(let a=2;a<=t;a++)e*=a;return e},Math.permutation=(t,e)=>Math.factorial(t)/Math.factorial(t-e),Math.combination=(t,e)=>Math.factorial(t)/(Math.factorial(e)*Math.factorial(t-e)),Array.times=(t,e)=>Array(e).fill(0).map(((e,a)=>t(a))),Array.range=t=>Array.times((t=>t),t),Object.defineProperty(Array.prototype,"at",{value:function(t){const e=this.length;return this[t<0?e-Math.abs(t+1)%e-1:t%e]}}),Object.defineProperty(Array.prototype,"chunk",{value:function(t){return Array.times((e=>this.slice(e*t,e*t+t)),Math.ceil(this.length/t))}}),Object.defineProperty(Array.prototype,"shuffle",{value:function(){return this.map((t=>[Math.random(),t])).sort(((t,e)=>t[0]-e[0])).map((t=>t[1]))}});const e=(t,e)=>t||e?"object"==typeof t?{x:t.x||0,y:t.y||0}:null==e?{x:t,y:t}:{x:t,y:e}:{x:0,y:0};e.components=t=>[t.x,t.y],e.ux=()=>e(1,0),e.uy=()=>e(0,1),e.add=(t,e)=>({x:t.x+e.x,y:t.y+e.y}),e.mul=(t,e)=>({x:t.x*e,y:t.y*e}),e.sub=(t,e)=>({x:t.x-e.x,y:t.y-e.y}),e.len=t=>Math.sqrt(t.x*t.x+t.y*t.y),e.manhattan=t=>Math.abs(t.x)+Math.abs(t.y),e.nor=t=>{let a=e.len(t);return a?{x:t.x/a,y:t.y/a}:e()},e.dot=(t,e)=>t.x*e.x+t.y*e.y,e.rot=(t,e)=>{let a=Math.sin(e),s=Math.cos(e);return{x:s*t.x-a*t.y,y:a*t.x+s*t.y}},e.eq=(t,e)=>t.x===e.x&&t.y===e.y,e.rad=t=>Math.atan2(t.y,t.x),e.cpy=t=>e(t),e.map=(t,e)=>({x:e(t.x,"x"),y:e(t.y,"y")}),e.str=(t,e=", ")=>`${t.x}${e}${t.y}`;const a=(t=4,e=4,a=[])=>({m:t,n:e,entries:a.concat(Array(t*e).fill(0)).slice(0,t*e)});a.identity=t=>a(t,t,Array(t*t).fill(0).map(((e,a)=>+(Math.floor(a/t)===a%t)))),a.get=(t,e,a)=>t.entries[a-1+(e-1)*t.n],a.set=(t,e,a,s)=>{t.entries[a-1+(e-1)*t.n]=s},a.row=(t,e)=>{const a=(e-1)*t.n;return t.entries.slice(a,a+t.n)},a.col=(t,e)=>Array.times((s=>a.get(t,s+1,e)),t.m),a.add=(t,e)=>t.m===e.m&&t.n===e.n&&a.map(t,((t,a)=>t+e.entries[a])),a.sub=(t,e)=>t.m===e.m&&t.n===e.n&&a.map(t,((t,a)=>t-e.entries[a])),a.mul=(t,e)=>{if(t.n!==e.m)return!1;const s=a(t.m,e.n);for(let r=1;r<=t.m;r++)for(let n=1;n<=e.n;n++)a.set(s,r,n,Math.dot(a.row(t,r),a.col(e,n)));return s},a.scale=(t,e)=>a.map(t,(t=>t*e)),a.trans=t=>a(t.n,t.m,Array.times((e=>a.col(t,e+1)),t.n).flat()),a.minor=(t,e,s)=>{if(t.m!==t.n)return!1;const r=[];for(let n=1;n<=t.m;n++)if(n!==e)for(let e=1;e<=t.n;e++)e!==s&&r.push(a.get(t,n,e));return a(t.m-1,t.n-1,r)},a.det=t=>{if(t.m!==t.n)return!1;if(1===t.m)return t.entries[0];if(2===t.m)return t.entries[0]*t.entries[3]-t.entries[1]*t.entries[2];let e=0,s=1;for(let r=1;r<=t.n;r++)e+=s*t.entries[r-1]*a.det(a.minor(t,1,r)),s*=-1;return e},a.nor=t=>{if(t.m!==t.n)return!1;const e=a.det(t);return a.map(t,(t=>t*e))},a.adj=t=>{const e=a(t.m,t.n);for(let s=1;s<=t.m;s++)for(let r=1;r<=t.n;r++)a.set(e,s,r,a.det(a.minor(t,s,r)));const s=a.map(e,((t,e)=>t*(e%2?-1:1)));return a.trans(s)},a.inv=t=>{if(t.m!==t.n)return!1;const e=a.det(t);return 0!==e&&a.scale(a.adj(t),1/e)},a.eq=(t,e)=>t.m===e.m&&t.n===e.n&&a.str(t)===a.str(e),a.cpy=t=>a(t.m,t.n,[...t.entries]),a.map=(t,e)=>a(t.m,t.n,t.entries.map(e)),a.str=(t,e=", ",a="\n")=>t.entries.chunk(t.n).map((t=>t.join(e))).join(a),t.exports={vec:e,mat:a}},76:(t,e,a)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=a(44),r=a(269);class n{constructor(t={}){this.defaultOptions={margin:10,padding:4,font:"10pt Lucida Console, monospace",lineHeight:12,foregroundColour:"#fff",backgroundColour:"#3338",defaultValue:{align:"left",showLabel:!0},defaultMarker:{showLabel:!0,showValue:!0,showMarker:!0,markerSize:6,markerStyle:"x",markerColour:"#ccc",space:"world",labelOffset:s.vec(10)}},this.options=Object.assign({},this.defaultOptions,t),this.values=new Map,this.markers=new Map}static initialise(t={}){n.instance=new n(t)}static getInstance(){return null==n.instance&&n.initialise(),n.instance}static value(t,e,a={}){const s=n.getInstance();s.values.set(t,Object.assign({label:t,value:e},s.defaultOptions.defaultValue,a))}static marker(t,e,a,s={}){const r=n.getInstance();r.markers.set(t,Object.assign({label:t,value:e,position:a},r.defaultOptions.defaultMarker,s))}static draw(t){const e=n.getInstance();let a;t.save(),t.scale(1/r.scaleFactor,1/r.scaleFactor),e.markers.forEach((a=>{"world"===a.space&&e.drawMarker(t,a)})),t.restore(),t.save(),t.setTransform(1,0,0,1,0,0);let o=e.options.margin,i=e.options.margin;const l=e.options.lineHeight+2*e.options.padding;e.values.forEach((r=>{var n,u,h,c;switch(r.align){case"left":a=s.vec(e.options.margin,o),o+=l;break;case"right":a=s.vec(t.canvas.clientWidth-e.options.margin,i),i+=l}e.drawLabel(t,(r.showLabel?r.label+": ":"")+r.value,a,r.align,null!==(n=r.padding)&&void 0!==n?n:e.options.padding,null!==(u=r.font)&&void 0!==u?u:e.options.font,null!==(h=r.foregroundColour)&&void 0!==h?h:e.options.foregroundColour,null!==(c=r.backgroundColour)&&void 0!==c?c:e.options.backgroundColour)})),e.markers.forEach((a=>{"screen"===a.space&&e.drawMarker(t,a)})),t.restore(),e.values.clear(),e.markers.clear()}drawMarker(t,e){var a,n,o,i,l;t.save();const u=s.vec.mul(null!==(a=e.position)&&void 0!==a?a:s.vec(),r.scaleFactor);if((e.showLabel||e.showValue)&&this.drawLabel(t,(e.showLabel?e.label+": ":"")+(e.showValue?""+e.value:""),s.vec.add(null!=u?u:s.vec(),e.labelOffset),"left",null!==(n=e.padding)&&void 0!==n?n:this.options.padding,null!==(o=e.font)&&void 0!==o?o:this.options.font,null!==(i=e.foregroundColour)&&void 0!==i?i:this.options.foregroundColour,null!==(l=e.backgroundColour)&&void 0!==l?l:this.options.backgroundColour),e.showMarker)switch(t.lineWidth=2,t.strokeStyle=t.fillStyle=e.markerColour,e.markerStyle){case"x":this.drawCross(t,u,e.markerSize);break;case"+":this.drawPlus(t,u,e.markerSize);break;case".":this.drawDot(t,u,e.markerSize)}t.restore()}drawLabel(t,e,a,s,r,n,o,i){t.save(),t.font=n,t.textBaseline="top";const l={width:t.measureText(e).width+2*r,height:this.options.lineHeight+2*r},u="right"===s?a.x-l.width:a.x;t.fillStyle=i,t.fillRect(u-r,a.y-r,l.width,l.height),t.fillStyle=o,t.fillText(e,u,a.y),t.restore()}drawCross(t,e,a){t.beginPath();const s=a/2;t.moveTo(e.x-s,e.y-s),t.lineTo(e.x+s,e.y+s),t.moveTo(e.x-s,e.y+s),t.lineTo(e.x+s,e.y-s),t.stroke()}drawPlus(t,e,a){t.beginPath();const s=a/2;t.moveTo(e.x,e.y-s),t.lineTo(e.x,e.y+s),t.moveTo(e.x-s,e.y),t.lineTo(e.x+s,e.y),t.stroke()}drawDot(t,e,a){t.beginPath(),t.arc(e.x,e.y,a/2,0,2*Math.PI),t.fill()}}e.default=n},221:(t,e,a)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=a(269),r=a(601),n=a(76),o=a(670),i=a(663);e.default=class{constructor(t){if(this.frameRate=0,this.frameCount=0,null===t)throw new Error("A valid container element must be specified.");if("canvas"!==t.tagName.toLowerCase())throw new Error("Container element must be a canvas.");this.canvas=t;const e=this.canvas.getContext("2d");if(null===e)throw new Error("Couldn't get a 2d context.");this.context=e,window.addEventListener("resize",this.resize.bind(this),!1),this.resize(),n.default.initialise(),o.default.initialise(this.canvas),this.stateManager=new i.default}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context.imageSmoothingEnabled=!1}initialise(){this.lastFrameTime=this.lastFrameCountTime=performance.now(),this.loop()}loop(){const t=performance.now(),e=Math.min(t-this.lastFrameTime,r.FPS_MIN);t-this.lastFrameCountTime>=1e3&&(this.lastFrameCountTime=t,this.frameRate=this.frameCount,this.frameCount=0),this.frameCount++,this.lastFrameTime=t,s.showFPS&&n.default.value("FPS",this.frameRate,{align:"right"}),this.update(e),this.draw(),window.requestAnimationFrame(this.loop.bind(this))}update(t){this.stateManager.update(t),o.default.update()}draw(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.setTransform(s.scaleFactor,0,0,s.scaleFactor,0,0),this.stateManager.draw(this.context),n.default.draw(this.context)}}},670:(t,e,a)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=a(44);class r{constructor(t){this.keyboardState={},this.previousKeyboardState={},this.mouseState={button:!1,position:s.vec(),wheel:0},this.previousMouseState={button:!1,position:s.vec(),wheel:0},t.addEventListener("mousedown",(()=>{this.mouseState.button=!0})),t.addEventListener("mouseup",(()=>{this.mouseState.button=!1})),t.addEventListener("touchstart",(()=>{this.mouseState.button=!0})),t.addEventListener("touchend",(()=>{this.mouseState.button=!1})),t.addEventListener("mousemove",(t=>{this.mouseState.position.x=t.offsetX,this.mouseState.position.y=t.offsetY})),t.addEventListener("keydown",(t=>{this.keyboardState[t.code]=!0})),t.addEventListener("keyup",(t=>{this.keyboardState[t.code]=!1})),t.addEventListener("wheel",(t=>{this.mouseState.wheel=t.deltaY>0?1:-1}))}static initialise(t){r.instance=new r(t)}static getInstance(){if(null==r.instance)throw new Error("Input manager not properly initialised");return r.instance}static update(){const t=r.getInstance();t.previousKeyboardState=Object.assign({},t.keyboardState),t.previousMouseState={button:t.mouseState.button,position:s.vec.cpy(t.mouseState.position),wheel:0}}static keyDown(t){const e=r.getInstance();if(null==t){for(const t in e.keyboardState)if(e.keyboardState[t])return!0;return!1}return!!e.keyboardState[t]}static keyPressed(t){const e=r.getInstance();if(null==t){for(const t in e.keyboardState)if(e.keyboardState[t]&&(!(t in e.previousKeyboardState)||!e.previousKeyboardState[t]))return!0;return!1}return!!e.keyboardState[t]&&!e.previousKeyboardState[t]}static keyReleased(t){const e=r.getInstance();if(null==t){for(const t in e.keyboardState)if(!e.keyboardState[t]&&e.previousKeyboardState[t])return!0;return!1}return!e.keyboardState[t]&&!!e.previousKeyboardState[t]}static mouseDown(){return!!r.getInstance().mouseState.button}static mousePressed(){const t=r.getInstance();return!!t.mouseState.button&&!t.previousMouseState.button}static mouseReleased(){const t=r.getInstance();return!t.mouseState.button&&!!t.previousMouseState.button}static mouseWheelUp(){return r.getInstance().mouseState.wheel>0}static mouseWheelDown(){return r.getInstance().mouseState.wheel<0}static mousePosition(){return r.getInstance().mouseState.position}}e.default=r},601:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FPS_MIN=void 0,e.FPS_MIN=1/30},900:(t,e)=>{"use strict";var a,s;Object.defineProperty(e,"__esModule",{value:!0}),e.Key=e.StateTransitionType=void 0,(s=e.StateTransitionType||(e.StateTransitionType={}))[s.In=0]="In",s[s.Out=1]="Out",s[s.None=2]="None",(a=e.Key||(e.Key={})).Up="ArrowUp",a.Down="ArrowDown",a.Left="ArrowLeft",a.Right="ArrowRight"},607:(t,e,a)=>{"use strict";const s=a(221);window.onload=()=>{new s.default(document.querySelector("#game")).initialise()}},663:(t,e,a)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=a(900);e.default=class{constructor(){this.states=[]}push(t){return this.states.push(t),t.stateManager=this,t.initialise(),t.transitionIn(),t}pop(){if(this.states.length>0){let t=this.states.length-1;for(;t>0&&this.states[t].transitionType===s.StateTransitionType.Out;)t--;if(t>=0){const e=this.states[t];return e.transitionOut(),e}}return null}clear(){this.states.forEach((t=>{t.transitionType!==s.StateTransitionType.Out&&t.transitionOut()}))}update(t){if(this.states.length>0){for(let e=this.states.length;e--;)if(this.states[e].transitionType!==s.StateTransitionType.Out){this.states[e].update(t);break}this.states.forEach((e=>{e.updateTransition(t)})),this.states=this.states.filter((t=>!t.disposed))}}draw(t){if(this.states.length>0){const e=[this.states[this.states.length-1]];let a=this.states.length-1;for(;a>0&&this.states[a].transparent;)e.push(this.states[--a]);for(let a=e.length;a--;)e[a].draw(t)}}}},269:t=>{"use strict";t.exports=JSON.parse('{"title":"RPG Game","scaleFactor":2,"showFPS":true}')}},e={};!function a(s){if(e[s])return e[s].exports;var r=e[s]={exports:{}};return t[s](r,r.exports,a),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,