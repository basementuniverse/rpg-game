(()=>{var t={865:t=>{Math.floatEquals=(t,e,r=Number.EPSILON)=>Math.abs(t-e)<r,Math.clamp=(t,e=0,r=1)=>t<e?e:t>r?r:t,Math.frac=t=>t>=0?t-Math.floor(t):t-Math.ceil(t),Math.lerp=(t,e,r)=>t+(e-t)*r,Math.unlerp=(t,e,r)=>(r-t)/(e-t),Math.blerp=(t,e,r,n,a,o)=>Math.lerp(Math.lerp(t,e,a),Math.lerp(r,n,a),o),Math.remap=(t,e,r,n,a)=>n+(t-e)*(a-n)/(r-e),Math.smoothstep=(t,e,r)=>Math.lerp(t,e,3*Math.pow(r,2)-2*Math.pow(r,3)),Math.radians=t=>Math.PI/180*t,Math.degrees=t=>180/Math.PI*t,Math.randomBetween=(t,e)=>Math.random()*(e-t)+t,Math.randomIntBetween=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,Math.cltRandom=(t=.5,e=.5,r=2)=>{let n=0;for(let t=r;t--;)n+=Math.random();return t+(n-r/2)/(r/2)*e},Math.cltRandomInt=(t,e)=>Math.floor(t+Math.cltRandom(.5,.5,2)*(e+1-t)),Math.weightedRandom=t=>{let e=t.reduce(((t,e)=>t+e),0),r=0;const n=Math.random()*e;for(;e>n;)e-=t[r++];return r-1},Math.lerpArray=(t,e,r=Math.lerp)=>{const n=e*(t.length-1),a=Math.clamp(Math.trunc(n),0,t.length-1);return r(t[a]||0,t[a+1]||0,Math.frac(n))},Math.dot=(t,e)=>t.reduce(((t,r,n)=>t+r*e[n]),0),Array.times=(t,e)=>Array(e).fill(0).map(((e,r)=>t(r))),Array.range=t=>Array.times((t=>t),t),Object.defineProperty(Array.prototype,"at",{value:function(t){const e=this.length;return this[t<0?e-Math.abs(t+1)%e-1:t%e]}}),Object.defineProperty(Array.prototype,"chunk",{value:function(t){return Array.times((e=>this.slice(e*t,e*t+t)),Math.ceil(this.length/t))}}),Object.defineProperty(Array.prototype,"shuffle",{value:function(){return this.map((t=>[Math.random(),t])).sort(((t,e)=>t[0]-e[0])).map((t=>t[1]))}});const e=(t,e)=>t||e?"object"==typeof t?{x:t.x||0,y:t.y||0}:null==e?{x:t,y:t}:{x:t,y:e}:{x:0,y:0};e.components=t=>[t.x,t.y],e.ux=()=>e(1,0),e.uy=()=>e(0,1),e.add=(t,e)=>({x:t.x+e.x,y:t.y+e.y}),e.mul=(t,e)=>({x:t.x*e,y:t.y*e}),e.sub=(t,e)=>({x:t.x-e.x,y:t.y-e.y}),e.len=t=>Math.sqrt(t.x*t.x+t.y*t.y),e.manhattan=t=>Math.abs(t.x)+Math.abs(t.y),e.nor=t=>{let r=e.len(t);return r?{x:t.x/r,y:t.y/r}:e()},e.dot=(t,e)=>t.x*e.x+t.y*e.y,e.rot=(t,e)=>{let r=Math.sin(e),n=Math.cos(e);return{x:n*t.x-r*t.y,y:r*t.x+n*t.y}},e.eq=(t,e)=>t.x===e.x&&t.y===e.y,e.rad=t=>Math.atan2(t.y,t.x),e.cpy=t=>e(t),e.map=(t,e)=>({x:e(t.x,"x"),y:e(t.y,"y")}),e.str=(t,e=", ")=>`${t.x}${e}${t.y}`;const r=(t=4,e=4,r=[])=>({m:t,n:e,entries:r.concat(Array(t*e).fill(0)).slice(0,t*e)});r.identity=t=>r(t,t,Array(t*t).fill(0).map(((e,r)=>+(Math.floor(r/t)===r%t)))),r.get=(t,e,r)=>t.entries[r-1+(e-1)*t.n],r.set=(t,e,r,n)=>{t.entries[r-1+(e-1)*t.n]=n},r.row=(t,e)=>{const r=(e-1)*t.n;return t.entries.slice(r,r+t.n)},r.col=(t,e)=>Array.times((n=>r.get(t,n+1,e)),t.m),r.add=(t,e)=>t.m===e.m&&t.n===e.n&&r.map(t,((t,r)=>t+e.entries[r])),r.sub=(t,e)=>t.m===e.m&&t.n===e.n&&r.map(t,((t,r)=>t-e.entries[r])),r.mul=(t,e)=>{if(t.n!==e.m)return!1;const n=r(t.m,e.n);for(let a=1;a<=t.m;a++)for(let o=1;o<=e.n;o++)r.set(n,a,o,Math.dot(r.row(t,a),r.col(e,o)));return n},r.scale=(t,e)=>r.map(t,(t=>t*e)),r.trans=t=>r(t.n,t.m,Array.times((e=>r.col(t,e+1)),t.n).flat()),r.minor=(t,e,n)=>{if(t.m!==t.n)return!1;const a=[];for(let o=1;o<=t.m;o++)if(o!==e)for(let e=1;e<=t.n;e++)e!==n&&a.push(r.get(t,o,e));return r(t.m-1,t.n-1,a)},r.det=t=>{if(t.m!==t.n)return!1;if(1===t.m)return t.entries[0];if(2===t.m)return t.entries[0]*t.entries[3]-t.entries[1]*t.entries[2];let e=0,n=1;for(let a=1;a<=t.n;a++)e+=n*t.entries[a-1]*r.det(r.minor(t,1,a)),n*=-1;return e},r.nor=t=>{if(t.m!==t.n)return!1;const e=r.det(t);return r.map(t,(t=>t*e))},r.adj=t=>{const e=r(t.m,t.n);for(let n=1;n<=t.m;n++)for(let a=1;a<=t.n;a++)r.set(e,n,a,r.det(r.minor(t,n,a)));const n=r.map(e,((t,e)=>t*(e%2?-1:1)));return r.trans(n)},r.inv=t=>{if(t.m!==t.n)return!1;const e=r.det(t);return 0!==e&&r.scale(r.adj(t),1/e)},r.eq=(t,e)=>t.m===e.m&&t.n===e.n&&r.str(t)===r.str(e),r.cpy=t=>r(t.m,t.n,[...t.entries]),r.map=(t,e)=>r(t.m,t.n,t.entries.map(e)),r.str=(t,e=", ",r="\n")=>t.entries.chunk(t.n).map((t=>t.join(e))).join(r),t.exports={vec:e,mat:r}},221:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(865);e.default=class{constructor(t){this.container=null,this.container=t}initialise(){console.log("Hello, world! Make sure libraries are loaded: "+n.vec.str(n.vec.add(n.vec(1,2),n.vec(3,4))))}}},607:(t,e,r)=>{"use strict";new(r(221).default)(document.querySelector(".main-container")).initialise()}},e={};!function r(n){if(e[n])return e[n].exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,